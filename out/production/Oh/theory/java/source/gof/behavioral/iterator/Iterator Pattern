1. 반복자 패턴이란?
    - 반복자 패턴은 컬렉션 요소들의 기본 표현(리스트, 스택, 트리 등)을 노출하지 않고 그들을 하나씩 순회할 수 있는 행동 디자인 패턴이다.
    - 반복자 패턴은 순한 알고리즘이 실제 구현된 객체에 의존하지 않고, 독립적인 동작을 유지하기 위해 객체의 내부 메서드에 직접 접근하지 않는다.
      대신 반복자의 메서드를 호출하여 처리한다.


2. 구성요소
    1) Iterator
       - 집합체의 요소들을 순서대로 검색하기 위한 인터페이스
    2) ConcreteIterator
       - Iterator 인터페이스 구현
    3) Aggregate
       - 여러 요소들로 이루어져 있는 집합체
    4) ConcreteAggregate
       - Aggregate 인터페이스를 구현하는 클래스

2. 장점
    - 단일 책임 원칙
    - 개방 / 폐쇄 원칙
    - 같은 컬렉션을 병렬로 순회할 수 있다. 각 반복자 객체에는 자신의 고유한 순회 상태가 포함되어 있기 때문이다.

3. 단점
    - 단순한 컬렉션들과만 작동하는 경우 반복자 패턴을 적용하는 것은 과도할 수 있다.
    - 반복자 패턴을 사용하는 것은 일부 특수 컬렉션들의 요소들을 직접 탐색하는 것보다 덜 효율적일 수 있다.

4. 다른 패턴과의 관계
    1) 반복자 패턴을 사용하여 복합체 패턴 트리들을 순회할 수 있다.
    2) 팩토리 메서드를 반복자와 함께 사용하여 컬렉션 자식 클래스들이 해당 컬렉션들과 호환되는 다양한 유형의 반복자들을 반환하도록 할 수 있다.
    3) 메멘토 패턴을 반복자 패턴과 함께 사용하면 현재 순회 상태를 포착하고 필요한 경우 롤백이 가능하다.

5. 예제
    - 예제 소스 : -


* 출처 : - https://refactoring.guru/ko/design-patterns/iterator
        - https://hirlawldo.tistory.com/175?category=1007990
        - https://velog.io/@minikuma/%EB%8B%A4%EC%8B%9C%EB%B3%B4%EB%8A%94-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-Iterator


