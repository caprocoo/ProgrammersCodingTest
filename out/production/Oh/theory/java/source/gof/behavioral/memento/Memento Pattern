1. 메멘토 패턴이란?
    - 메멘토 패턴은 객체의 상태 정보를 저장하고 사용자의 필요에 의하여 원하는 시점의 데이터를 복원할 수 있는 패턴을 의미한다.

2. 구성요소
    1) Originator
        - 자신의 상태에 대한 스냅샷들을 생성할 수 있으며, 필요시 스냅샷에서 자신의 상태를 복원할 수 있다.

    2) Memento
        - 오리지네이터 상태의 스냅샷 역할을 하는 값 객체이다.
        - 관행적으로 메멘토는 불변으로 만든 후 생성자를 통해 데이터를 한 번만 전달한다.

    3) CareTaker
        - '언제' 그리고 '왜' 오리지네이터 상태를 캠처하는지 알고 있다.
        - 뿐만 아니라 상태가 복원되어야 하는 시기도 알고 있다.
        - 메멘토들의 스택을 저장하여 오리지네이터의 기록을 추적할 수 있다.

3. 장점
    - 캡슐화를 위반하지 않고 객체의 상태의 스냅샷들을 생성할 수 있다.
    - 케어테이커가 오리지네이터 상태의 기록을 유지하도록 하여 오리지네이터의 코드를 단순화할 수 있다.

4. 단점
    - 클라이언트들이 메멘토들을 너무 자주 생성하면 앱이 많은 RAM을 소모할 수 있다.
    - 케어테이커들은 더 이상 쓸모없는 메멘토들을 파괴할 수 있도록 오리지네이터의 수명주기를 추적해야 한다.


5. 예제
    - 예제 소스 : - src/theory/java/source/gof/behavioral/memento/Main.java 참조


* 출처 : - https://refactoring.guru/ko/design-patterns/memento
        - https://lktprogrammer.tistory.com/65


