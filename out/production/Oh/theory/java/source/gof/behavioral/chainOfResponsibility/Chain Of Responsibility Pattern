1. 책임 연쇄 패턴이란?
    - 책임 연쇄 패턴은 클라이언트의 요청을 처리하기 위해 객체를 체인 형태로 전달하여 결합력을 낮추기 위해 사용한다.
    - 체인 안에 있는 객체 자신이 요청을 어떻게 처리할지 결정하며 다음 체인으로 객체로 전달할지 결정한다.
    - 수신측에는 메시지를 처리할 객체들을 연결시켜 놓고 송신측에서 메시지를 수신측에게 전달하면 요청에 적합한 객체를 찾을때까지 연결된 객체들에게 메시지르 전달한다.


2. 장점
    - 요청의 처리 순서를 제어할 수 있다.
    - 단일 책임 원칙, 작업을 호출하는 클래스들을 작업을 수행하는 클래스들과 분리할 수 있다.
    - 개방/폐쇄 원칙, 기존 클라이언트 코드를 손상하지 않고 앱에 새 핸들러들을 도입할 수 있다.

3. 단점
    - 일부 요청들은 처리되지 않을 수 있다.

4. 다른 패턴과의 관계
    1) 커맨드 vs 중재자 vs 옵서버 vs 책임 연쇄
        - 책임 연쇄 패턴은 잠재적 수신자의 동적 체인을 따라 수신자 중 하나에 의해 요청이 처리될 때까지 요청을 순차적으로 전달한다.
        - 커맨드 패턴은 발신자와 수신자 간의 단방향 연결을 설립한다.
        - 중재자 패턴은 발신자와 수신자 간의 직접 연결을 제거하여 그들이 중재자 객체를 통해 간접적으로 통신하도록 강제한다.
        - 옵서버 패턴은 수신자들이 요청들의 수신을 동적으로 구독 및 구독 취소할 수 있도록 한다.

    2) 책임 연쇄 패턴은 종종 복합체 패턴과 함께 사용된다.
        - 잎 컴포넌트가 요청을 받으면 모든 부모 컴포넌트들의 체인을 통해 객체 트리의 뿌리까지 전달할 수 있다.

    3) 책임 연쇄 패턴의 핸들러들은 커맨드로 구현할 수 있다.
        - 다양한 작업을 같은 콘텍스트 객체에 대해 실행할 수 있으며 해당 콘텍스트 객체는 요청의 역할을 한다. (요청은 메서드의 매개변수를 의미함)

    4) 책임연쇄 vs 데코레이터
        - 두 패턴 모두 실행을 일련의 객체들을 통해 전달할 때 재귀적인 합성에 의존하나, 아래와 같은 차이점이 있다.
        - 책임 연쇄 패턴의 핸들러들은 서로 독립적으로 임의의 작업을 실행할 수 있으며, 또한 해당 요청을 언제든지 더 이상 전달하지 않을 수 있다.
        - 데코레이터 패턴은 객체의 행동을 확장하며 동시에 이러한 행동을 기초 인터페이스와 일관되게 유지할 수 있다.
          또한, 데코레이터들은 요청의 흐름을 중단할 수 없다.

5. 예제
    - 예제 소스 : -

* 출처 : - https://donghyeon.dev/design%20pattern/2020/05/11/Chain-of-Responsibility-%ED%8C%A8%ED%84%B4/
        - https://sup2is.github.io/2020/07/02/chain-of-responsibility-parttern.html

