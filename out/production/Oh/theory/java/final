1. final이란?
    : 최종적이라는 뜻을 가지고 있고 초기값이 저장되면 최종적인 값이 되어 프로그램 실행 도중에 수정을 할 수 없다.

2. final 사용법
    : 초기값을 줄 수 있는 방법은 두 가지가 있다.
        1) 필드 선언시 주는 방법
        2) 생성자를 통해 주는 방법
    - 단순 값이면 필드 선언 시 주는 것이 가장 간단하다.
    - 복잡한 초기화 코드가 필요하거나 객체 생성 시에 외부 데이터로 초기화를 시켜야한다면 생성자를 통해 부여한다.
    ex) 필드 선언 시
    <code>
        final int number = 1; //final 타입 필드 [= 초기값];
    </code>

3. final 객체
    <code>
        package theory.java.source._final;


        class Company{
            String name = "회사명";

            public String getName() {
                return name;
            }

            public void setName(String name) {
                this.name = name;
            }
        }

        public class final객체 {
            public static void main(String[] args) {
                final Company company = new Company();
                //company = new Company(); //객체를 한번 생성했다면 재생성 불가능
                company.setName("ex회사"); //클래스의 필드는 변경가능
            }
        }
    </code>
    => 객체 변수에 final로 선언하면 그 변수에 다른 참조 값을 지정할 수 없다.
       즉, 한번 생성된 final 객체는 같은 타입으로 재생성이 불가능하다.
       객체 자체는 변경이 불가능하지만 객체 내부 변수는 변경 가능하다.

4. final Class
    <code>
        //final 클래스
        final class Company{
            String name = "회사명";
        }

        //상속 불가능
        class A_Company extends Company{

        }
    </code>
    => 위와 같이 클래스에 final을 사용하게 되면 그 클래스는 최종상태가 되어 더이상 상속이 불가능하다.
       final 클래스여도 필드는 Setter 함수를 통해 변경이 가능하다.

5. final Method

    <code>
        package theory.java.source._final;


        class Company{

            String name = "회사명";

            public final void print() {
                System.out.println("회사 이름은 :"+name+" 입니다.");
            }
        }

        class finalMethod extends Company{

            String name = "a회사";

        //    메서드 오버라이드 불가능
        //    public void print() {
        //
        //    }
        }
    </code>
    => Method에 final을 사용하게 되면 상속받은 클래스에서 부모의 final Method를 재정의할 수 없다.
       자신이 만든 Method를 변경할 수 없게끔 하고싶을 때 사용된다.


* 출처 : https://coding-factory.tistory.com/525

