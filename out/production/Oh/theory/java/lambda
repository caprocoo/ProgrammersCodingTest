

1. 람다식 (Lambda Expression)
    - 함수(메서드)를 간단한 '식(expression)'으로 표현하는 방법
    - 익명 함수

* 함수와 메서드의 차이
    - 근본적으로는 동일하지만 함수는 일반적인 용어, 메서드는 객체지향개념 용어이다.
    - 함수는 클래스의 독립적이고, 메서드는 클래스의 종속적이다.

2. 람다식 작성하기
    - return 생략 가능
    - 메서드 이름 반환타입 제거 (끝에 ';' 안붙임)
    - 매개변수 타입 추론 가능시 생략 가능

3. 람다식 작성 시 주의사항
    - 매개변수 하나인 경우 괄호 생략 가능
    - 문장이 하나일 경우 괄호 생략 가능

4. 람다식은 익명 함수가 아니라 익명 객체이다.
    - 익명 객체 : 객체의 선언과 생성을 동시에 한다.
    - 참조 변수의 타입은 ?? => 여기서 함수형 인터페이스가 등장!!

5. 함수형 인터페이스
    - 함수형 인터페이스 : 단 하나의 추상 메서드만 선언된 인터페이스
    - 익명클래스의 선언, 객체 생성을 동시에 한다.
    - 'new 조상이름(클래스, 인터페이스) {}' 형식으로 작성한다
    - 함수형 인터페이스 타입의 참조변수로 람다식을 참조할 수 있다.
    (단, 함수형 인터페이스의 메서드와 람다식의 매개변수 개수와 반환타입이 일치해야 한다.)
    ex) [기존]
        MyFunction f = new MyFunction(){
                            public int max(int a, int b){
                                return a>b?a:b;
                            }
                        }
        [람다식]
        MyFunction f = (a,b) -> a>b?a:b;
        int value = f.max(3,5);







