* 모던 자바 인 액션 chap05 - 숫자형 스트림 p.181

3. 숫자형 스트림

    3-1 기본형 특화 스트림
        - 자바 8에서는 세 가지 기본형 특화 스트림을 제공한다.
            (1) int 요소에 특화된 IntStream
            (2) double 요소에 특화된 DoubleStream
            (3) long 요소에 특화된 LongStream
        - 각각의 인터페이스는 sum이나 max와 같이 자주 사용하는 숫자 관련 리듀싱 연산 수행 메서드를 제공한다.
        - 또한 필요할 때 다시 객체 스트림으로 복원하는 기능도 제공한다.

        1) 숫자 스트림으로 매핑
            - 스트림을 특화 스트림으로 변화할 때는 mapToInt, mapToDouble, mapToLong 세 가지 메서드를 가장 많이 사용한다.
            - 만일 스트림이 비어있을 경우 sum은 기본값인 0을 리턴한다.
            - 이들 메서드는 Stream의 map과 정확히 같은 기능을 수행한다.
            <code>
                int calories = menu.stream().mapToInt(Dish::getCalories).sum();
            </code>
            => return 값이 Stream<T>가 아닌 특화된 스트림인 IntStream 이다.

        2) 객체 스트림으로 복원하기
            - 숫자 스트림에서 원상태인 특화되지 않은 스트림으로 바꾸는 것을 말한다.
            - boxed 메서드를 이용한다.
            <code>
                IntStream intStream = menu.stream().mapToInt(Dish::getCalories);    // Stream to IntStream
                Stream<Integer> stream = intStream.boxed();                         // IntStream tp Stream
            <code>

        3) 기본 값 : OptionalInt
            - 0이라는 기본 값이 있지만 최댓값을 찾을 때와 같은 경우 스트림에 요소가 없는 상황과 실제 최댓값이 0인 상황을 구별해야 한다.
              => Optional을 사용한다.
            - OptionalInt, OptionalDouble, OptionalLong 세 가지 기본형 특화 스트림을 제공한다.
            <code>
                OptionalInt max = menu.stream().mapToInt(Dish::getCalories).max();
                int max = maxCal.orElse(1);     // 값이 없을 때 기본 최댓값을 설정할 수 있다.
            </code>

    3-2 숫자 범위
        - 특정 범위의 숫자를 이용해야 하는 상황이 발생한다. ex) 1에서 100 사이의 숫자를 생성한다.
        - IntStream과 LongStream에서는 range와 rangeClosed라는 두 가지 정적 메서드를 제공한다.
          두 메서드 모두 첫 번째 인수로 시작값을, 두 번째 인수로 종료 값을 갖는다.
        - range는 시작값과 종료값이 결과에 포함되지 않지만 rangeClosed는 시작값과 종료값이 결과에 포함된다.
        <code>
            IntStream intStream = IntStream.rangeClosed(1, 100).filter(i -> i % 2 == 0);    // 1~100까지의 범위 중 짝수 스트림
            System.out.println(intStream.count());  // 50개의 짝수

            IntStream intStream2 = IntStream.range(1, 100).filter(i -> i % 2 == 0);
            System.out.println(intStream2.count()); // 49개의 짝수 (1과 100은 포함하지 않는다)
        </code>

    3-3 숫자 스트림 활용 : 피타고라스 수
        1) 피타고라스 수
            - a * a + b * b = c * c을 만족하는 공식

        2) 좋은 필터링 조합
            - 세 수 중에서 a, b 두 수만 제공했다고 가정하자.
            - 두 수가 피타고라스 수의 일부가 될 수 있는 조합인지 어떻게 확인할 수 있을까?
              바로 a * a + b * b의 제곱근이 정수인지 확인할 수 있다.
              <code>
                Math.sqrt(a*a + b*b) % 1 == 0;  // 나머지가 0이기 때문에 정수이다.
              </code>
            - 이를 filter에 다음과 같이 활용할 수 있다.
              <code>
                filter(b-> Math.sqrt(a*a + b*b) % 1 == 0)
              </code>
              => a라는 값이 주어지고 b는 스트림으로 제공된다고 가정할 때 filter로 a와 함께 피타고라스 수를 구성하는 모든 b를 필터링할 수 있다.

        3) 집합 생성
            - 필터를 이용해서 좋은 조합을 갖는 a,b를 선택할 수 있게 되었다.
            - 이제 map()을 통해 마지막 세 번째 수를 찾아야 한다.
            <code>
                filter(b->Math.sqrt(a*a + b*b) %1 ==0).map(b-> new int[]{a, b, Math.sqrt(a*a + b*b)});
            </code>

        4) b값 생성
            - Stream.rangeClosed로 범위의 수를 만든다.
            <code>
                IntStream.rangeClosed(1, 100).filter(b-> Math.sqrt(a*a + b* b)%1==0).boxed().map(b-> new int[]{a, b, Math.sqrt(a*a+b*b)});
            </code>
            => boxed를 이용해서 Stream<Integer>로 복원했다. 스트림의 map은 스트림의 요소를 int 배열로 반환하기 때문이다.
               IntStream의 map은 스트림의 각 요소로 int가 반환되기에 우리가 원하는 연산이 아니다.
               혹은 아래와 같이 표현할 수 있다.
            <code>
                IntStream.rangeClosed(1, 100).filter(b-> Math.sqrt(a*a + b* b)%1==0).mapToObj(b-> new int[]{a, b, Math.sqrt(a*a+b*b)});
            </code>
            => mapToObj 메서드를 이용하면 더 간단하게 표현할 수 있다.

        5) a값 생성
            <code>
                Stream<int[]> pythagoreanTriples = IntStream.rangeClosed(1, 100).boxed().flatMap(a -> IntStream.range(a, 100).filter(b -> Math.sqrt(a * a + b * b) % 1 == 0).mapToObj(b -> new int[]{a, b, (int) Math.sqrt(a * a + b * b)}));
                pythagoreanTriples.limit(5).forEach(t -> System.out.println(t[0] + " "+t[1] + " "+t[2] ));
            </code>
            (1) a에 사용할 1부터 100까지의 숫자를 만든다.
            (2) a를 이용하여 세 수의 스트림을 만든다.
            (3) flatMap 메서드는 생성된 각각의 스트림을 하나의 평준화된 스트림으로 만들어준다.

            ※ b의 범위가 a에서 100으로 바뀐 이유는 b를 1부터 시작하게 되면 중복된 세 수가 생성될 수 있다.
              ex) (3,4,5) 와 (4,3,5) ...

        6) 개선된 코드
            - 여기서 제곱근을 계산하는 Math.sqrt()함수가 두 번 쓰인다.
            - 따라서 피타고라스 형식을 만족하는 세 수를 만든 다음에 원하는 조건에 맞는 결과만 필터링하는 것이 더 최적화된 코드이다.
            <code>
                Stream<double[]> pythagoreanTriples2 =  IntStream.rangeClosed(1, 100).boxed().flatMap(a -> IntStream.range(a, 100).mapToObj(b -> new double[]{a, b, Math.sqrt(a * a + b * b)})).filter(t -> t[2] % 1 == 0);
                pythagoreanTriples2.limit(5).forEach(t -> System.out.println(t[0] + " "+t[1] + " "+t[2] ));
            </code>













