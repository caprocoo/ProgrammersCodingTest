* 모던 자바 인 액션 chap02 - 동작 파라미터화 코드 전달하기 p.67

3. Comparable vs Comparator?
    - Comparable과 Comparator는 모두 인터페이스(interface) 이다.
    - Comparable 인터페이스에는 compareTo(T o) 메소드를 재정의 해주어야 한다.
    - Comparator 인터페이스에는 compareTo(T o1, T o2) 메소드를 재정의 해주어야 한다.

    * 왜 compare method만 구현하는 것일까?
    => Java 8부터는 Interface에서도 일반 메서드를 구현할 수 있도록 변경되었고, 대부분이 default 혹은 static으로 선언된 method로 이루어져 있다.
       default와 static으로 선언된 method가 아니면 추상메서드의 의미로 반드시 재정의가 필요하다.
       default로 선언된 method는 재정의(override)를 할 수 있고, static은 재정의를 할 수 없다.

    3-1 Comparable & Comparator - "객체를 비교할 수 있도록 만든다."
         : 우리는 보통 primitive 타입의 실수 변수(byte, int, double ...)의 경우는 부등호를 갖고 쉽게 비교가 가능하다.
           하지만 객체를 비교할 때는 어떻게 비교할까??
           어떤 필드를 기준으로 비교해야 할 것인가??
           => 본질적으로 객체는 사용자가 기준을 정해주지 않는 이상 어떤 객체가 더 높은 우선순위를 갖는지 판단할 수 없다.
              이러한 문제점을 해결하기 위해 Comparable & Comparator 가 사용된다.

    3-2 Comparable - "자기 자신과 매개변수 객체를 비교"

        1) example
            <code>
                class Student implements Comparable<Student> {

                    int age;			// 나이
                    int classNumber;	// 학급

                    Student(int age, int classNumber) {
                        this.age = age;
                        this.classNumber = classNumber;
                    }

                    @Override
                    public int compareTo(Student o) {

                        // 자기자신의 age가 o의 age보다 크다면 양수
                        if(this.age > o.age) {
                            return 1;
                        }
                        // 자기 자신의 age와 o의 age가 같다면 0
                        else if(this.age == o.age) {
                            return 0;
                        }
                        // 자기 자신의 age가 o의 age보다 작다면 음수
                        else {
                            return -1;
                        }
                    }
                }
            </code>

            - 만약 나이를 기준으로 비교(대소 관계)를 하고자 한다면 위와 같이 코드를 작성한다.
              자기 자신의 age(나이)와 매개변수로 들어온 o의 age의 값을 비교하면 된다.
            - compareTo method는 int 값을 반환하도록 되어있다.
              => '값'을 비교하여 정수를 반환해야 한다는 뜻이며 자기 자신을 기준으로 삼아 상대방과의 대소관계를 파악한다.

            * 자기 자신을 기준으로 상대방과 차이 값을 비교한다면 아래와 같은 코드가 더 효율적이지 않을까?
            <code>
                class Student implements Comparable<Student> {

                    int age;			// 나이
                    int classNumber;	// 학급

                    Student(int age, int classNumber) {
                        this.age = age;
                        this.classNumber = classNumber;
                    }

                    @Override
                    public int compareTo(Student o) {

                        /*
                         * 만약 자신의 age가 o의 age보다 크다면 양수가 반환 될 것이고,
                         * 같다면 0을, 작다면 음수를 반환할 것이다.
                         */
                        return this.age - o.age;
                    }
                }
            </code>

            * 결과적으로 나온 코드
            <code>

                public class Test {
                    public static void main(String[] args)  {

                        Student a = new Student(17, 2);	// 17살 2반
                        Student b = new Student(18, 1);	// 18살 1반


                        int isBig = a.compareTo(b);	// a자기자신과 b객체를 비교한다.

                        if(isBig > 0) {
                            System.out.println("a객체가 b객체보다 큽니다.");
                        }
                        else if(isBig == 0) {
                            System.out.println("두 객체의 크기가 같습니다.");
                        }
                        else {
                            System.out.println("a객체가 b객체보다 작습니다.");
                        }

                    }

                }

                class Student implements Comparable<Student> {

                    int age;			// 나이
                    int classNumber;	// 학급

                    Student(int age, int classNumber) {
                        this.age = age;
                        this.classNumber = classNumber;
                    }

                    @Override
                    public int compareTo(Student o) {
                        return this.age - o.age;
                    }
                }
            </code>

        2) warning (매우 중요)
            - 우리가 편리하게 두 수의 대소비교를 두 수의 차를 통해 음수, 0, 양수로 구분했지만 치명적인 단점이 있다.
                => 뺄셈 과정에서 자료형의 범위를 넘어버리는 경우가 발생할 수 있기 때문이다.
                   (int형의 경우 표현범위는 -2,147,483,648~2,147,483,647 이다.)
            - 자료형에서 주어진 범위의 하한선을 넘어버리는 것을 'Underflow', 상한선을 넘어버리는 것을 'Overflow' 라고 한다.

            ※ compareTo 뿐만 아니라 compare을 구현할 때 Overflow, Underflow가 발생할 여지가 있는지 반드시 확인하고 사용해야 한다.
               특히 primitive 값에 대해 예외를 확인하기 어렵다면 '<', '>', '==' 으로 대소 비교를 해주는 것이 안전하며 일반적으로 권장되는 방식이다.

        3) 특징
           (1) 자기 자신과 매개변수를 비교한다.
           (2) compareTo method를 반드시 구현해야 한다.

    3-3 Comparator - "두 매개변수 객체를 비교"
        1) example
            <code>
                import java.util.Comparator;	// import 필요
                class Student implements Comparator<Student> {

                    int age;			// 나이
                    int classNumber;	// 학급

                    Student(int age, int classNumber) {
                        this.age = age;
                        this.classNumber = classNumber;
                    }

                    @Override
                    public int compare(Student o1, Student o2) {

                        // o1의 학급이 o2의 학급보다 크다면 양수
                        if(o1.classNumber > o2.classNumber) {
                            return 1;
                        }
                        // o1의 학급이 o2의 학급과 같다면 0
                        else if(o1.classNumber == o2.classNumber) {
                            return 0;
                        }
                        // o1의 학급이 o2의 학급보다 작다면 음수
                        else {
                            return -1;
                        }
                    }
                }
            </code>

            - 이번 코드는 학급(classNumber)을 기준으로 비교하는 코드이며 Comparator를 import 해준다.
            - 선행 원소 o1과 후행 원소 o2를 비교함에 있어 자기 자신은 두 객체 비교에 영향이 없다.

            * 이 또한 Comparable과 같이 효율적으로 바꾼다면 아래와 같다.
            <code>
                import java.util.Comparator;

                public class Test {
                    public static void main(String[] args)  {

                        Student a = new Student(17, 2);	// 17살 2반
                        Student b = new Student(18, 1);	// 18살 1반
                        Student c = new Student(15, 3);	// 15살 3반

                        // a객체와는 상관 없이 b와 c객체를 비교한다.
                        int isBig = a.compare(b, c);

                        if(isBig > 0) {
                            System.out.println("b객체가 c객체보다 큽니다.");
                        }
                        else if(isBig == 0) {
                            System.out.println("두 객체의 크기가 같습니다.");
                        }
                        else {
                            System.out.println("b객체가 c객체보다 작습니다.");
                        }

                    }
                }

                class Student implements Comparator<Student> {

                    int age;			// 나이
                    int classNumber;	// 학급

                    Student(int age, int classNumber) {
                        this.age = age;
                        this.classNumber = classNumber;
                    }

                    @Override
                    public int compare(Student o1, Student o2) {
                        return o1.classNumber - o2.classNumber;
                    }
                }
            </code>

        2) warning (매우 중요)
            - Comparable 과 동일하게 Overflow, Underflow를 주의해야 한다. (3-2 Comparable 2) warning 참조)

    3-4 Comparator 활용
        1) Comparator 기능 만들기
            - Comparator를 통해 compare method를 사용하려면 compare method를 활용하기 위한 객체가 필요하다.
              만약 a,b,c 객체가 생성되어 있고 이들을 비교하기 위해서는 어느 한 객체를 통해 compare method를 사용해야 한다는 것이다.

            <code>
            public class Test {
                public static void main(String[] args)  {

                    Student a = new Student(17, 2);	// 17살 2반
                    Student b = new Student(18, 1);	// 18살 1반
                    Student c = new Student(15, 3);	// 15살 3반

                    //          ⋁
                    int isBig = a.compare(a, b);
                    //           ⋁
                    int isBig2 = a.compare(b, c);
                    //           ⋁
                    int isBig3 = b.compare(a, c);

                }
            }
            // Student class 생략
            </code>
            - 위의 코드 중 'V' 표시난 부분을 보면 호출하기 위한 대상이 a이건 b이건, c이건 어떤 객체를 호출하던 상관이 없다.
              => 일관성이 없다.

            - 그렇다면 비교만을 위해 Student 객체를 하나 생성하면 어떨까?
            <code>
                public class Test {
                	public static void main(String[] args)  {

                		Student a = new Student(17, 2);		// 17살 2반
                		Student b = new Student(18, 1);		// 18살 1반
                		Student c = new Student(15, 3);		// 15살 3반
                		Student comp = new Student(0, 0);	// 비교만을 위해 사용할 객체

                		//           ⋁
                		int isBig = comp.compare(a, b);
                        //            ⋁
                		int isBig2 = comp.compare(b, c);
                		//            ⋁
                		int isBig3 = comp.compare(a, c);

                	}
                }

                // Student class 생략
            <code>
            => Student class에서 변수로 두고 있던 age, clasNumber 변수는 쓸모가 없지만 생성이 되어버린다는 단점이 있다.

            * 우리가 원하는 것은 Comparator 비교 기능만 따로 두고 싶다!!
                => 답은 바로 "익명 객체(클래스)를 활용한다."

        2) 익명 객체란? - "이름이 정의되지 않은 객체"
            - 보통 클래스를 생성할 때 class 키워드 다음에 이름을 정의했다. 이름 없이 class를 정의한다는 것은 불가능하다.
            - 하지만, 특정 구현 부분만 따로 사용한다거나, 부분적으로 기능을 일시적으로 바꿔야 할 경우에 사용하는 것이 익명객체이다.

            <code>
                public class Anonymous {
                	public static void main(String[] args) {

                		Rectangle a = new Rectangle();

                		// 익명 객체 1
                		Rectangle anonymous1 = new Rectangle() {

                			@Override
                			int get() {
                				return width;
                			}
                		};

                		System.out.println(a.get());
                		System.out.println(anonymous1.get());
                		System.out.println(anonymous2.get());
                	}

                	// 익명 객체 2
                	static Rectangle anonymous2 = new Rectangle() {

                		int depth = 30;
                		@Override
                		int get() {
                			return width * height * depth;
                		}
                	};
                }

                class Rectangle {

                	int width = 10;
                	int height = 20;

                	int get() {
                		return height;
                	}
                }
            <code>
            - 일반적인 객체 생성은 'Rectangle a = new Rectangle();' 와 같이 생성하지만,
              익명 객체의 경우에는 'Rectangle a = new Rectangle() { //...구현부...// };' 와 같이 생성한다.
            - 익명 객체는 이름이 정의되지 않은 하나의 새로운 클래스와 같다고 보면 된다.
            - 구현부에 집중해야 한다. 구현부에서 변수를 선언하기도하고 Rectangle class 의 get() 을 Override 했다.
                : Rectangle을 상속받은 하나의 새로운 class라는 것이다.

            * 이름은 Raectangle이 아닌가??
                => 아니다. 밑의 두 코드를 비교해보자.

            - extends를 사용한 자식 클래스 (ChildRectangle extends Rectangle) example
            <code>
                public class Anonymous {
                	public static void main(String[] args) {

                		Rectangle a = new Rectangle();
                		ChildRectangle child = new ChildRectangle();

                		System.out.println(a.get());		// 20
                		System.out.println(child.get());	// 10 * 20 * 40
                	}
                }

                class ChildRectangle extends Rectangle {

                	int depth = 40;

                	@Override
                	int get() {
                		return width * height * depth;
                	}
                }

                class Rectangle {

                	int width = 10;
                	int height = 20;

                	int get() {
                		return height;
                	}
                }
            </code>
            => Rectangle이라는 클래스를 상속받아 ChildRectangle이라는 이름으로 정의된 자식 클래스이며, depth라는 필드도 새로 생성하고,
               get() 또한 Override 되었다.
               또한, 각 클래스는 a와 child라는 변수 명으로 객체를 담고 있다.

            - 익명 객체 example
            <code>
                public class Anonymous {
                	public static void main(String[] args) {

                		Rectangle a = new Rectangle();

                		Rectangle anonymous = new Rectangle() {
                			int depth = 40;
                			@Override
                			int get() {
                				return width * height * depth;
                			}
                		};

                		System.out.println(a.get());			// 20
                		System.out.println(anonymous.get());	// 10 * 20 * 40
                	}
                }
                class Rectangle {

                	int width = 10;
                	int height = 20;

                	int get() {
                		return height;
                	}
                }
            </code>
            => 클래스 이름으로 정의되지 않고 anonymous라는 이름으로 객체만 생성되어 있다.
               이름이 정의되지 않기 때문에 익명 객체의 경우는 상속할 대상이 있어야 한다.
               여기서 상속이라 함은 class의 extends 뿐만 아니라, interface의 implements 또한 마찬가지이다.

        3) 익명 객체를 활용한 Comparator 기능 사용
            <code>
                import java.util.Comparator;

                public class Test {
                	public static void main(String[] args) {

                		// 익명 객체 구현방법 1
                		Comparator<Student> comp1 = new Comparator<Student>() {
                			@Override
                			public int compare(Student o1, Student o2) {
                				return o1.classNumber - o2.classNumber;
                			}
                		};
                	}

                	// 익명 객체 구현 2
                	public static Comparator<Student> comp2 = new Comparator<Student>() {
                		@Override
                		public int compare(Student o1, Student o2) {
                			return o1.classNumber - o2.classNumber;
                		}
                	};
                }


                // 외부에서 익명 객체로 Comparator가 생성되기 때문에 클래스에서 Comparator을 구현 할 필요가 없어진다.
                class Student {

                	int age;			// 나이
                	int classNumber;	// 학급

                	Student(int age, int classNumber) {
                		this.age = age;
                		this.classNumber = classNumber;
                	}

                }
            </code>
            - 필요에 따라 main 함수 밖에 정적(static) 타입으로 선언하거나 main 밖에 지역 변수와 같이 non-static으로 생성한다.

        4) 최종 코드
            <code>
                import java.util.Comparator;

                public class Test {
                	public static void main(String[] args)  {

                		Student a = new Student(17, 2);	// 17살 2반
                		Student b = new Student(18, 1);	// 18살 1반
                		Student c = new Student(15, 3);	// 15살 3반

                		// comp 익명객체를 통해 b와 c객체를 비교한다.
                		int isBig = comp.compare(b, c);

                		if(isBig > 0) {
                			System.out.println("b객체가 c객체보다 큽니다.");
                		}
                		else if(isBig == 0) {
                			System.out.println("두 객체의 크기가 같습니다.");
                		}
                		else {
                			System.out.println("b객체가 c객체보다 작습니다.");
                		}

                	}

                	public static Comparator<Student> comp = new Comparator<Student>() {
                		@Override
                		public int compare(Student o1, Student o2) {
                			return o1.classNumber - o2.classNumber;
                		}
                	};
                }

                class Student {

                	int age;			// 나이
                	int classNumber;	// 학급

                	Student(int age, int classNumber) {
                		this.age = age;
                		this.classNumber = classNumber;
                	}

                }
            </code>
            => classNumber를 기준으로 객체를 비교하는 로직

            <code>
                import java.util.Comparator;

                public class Test {
                	public static void main(String[] args)  {

                		Student a = new Student(17, 2);	// 17살 2반
                		Student b = new Student(18, 1);	// 18살 1반
                		Student c = new Student(15, 3);	// 15살 3반

                		// 학급 기준 익명객체를 통해 b와 c객체를 비교한다.
                		int classBig = comp.compare(b, c);

                		if(classBig > 0) {
                			System.out.println("b객체가 c객체보다 큽니다.");
                		}
                		else if(classBig == 0) {
                			System.out.println("두 객체의 크기가 같습니다.");
                		}
                		else {
                			System.out.println("b객체가 c객체보다 작습니다.");
                		}

                		// 나이 기준 익명객체를 통해 b와 c객체를 비교한다.
                		int ageBig = comp2.compare(b, c);

                		if(ageBig > 0) {
                			System.out.println("b객체가 c객체보다 큽니다.");
                		}
                		else if(ageBig == 0) {
                			System.out.println("두 객체의 크기가 같습니다.");
                		}
                		else {
                			System.out.println("b객체가 c객체보다 작습니다.");
                		}

                	}

                	// 학급 대소 비교 익명 객체
                	public static Comparator<Student> comp = new Comparator<Student>() {
                		@Override
                		public int compare(Student o1, Student o2) {
                			return o1.classNumber - o2.classNumber;
                		}
                	};

                	// 나이 대소 비교 익명 객체
                	public static Comparator<Student> comp2 = new Comparator<Student>() {
                		@Override
                		public int compare(Student o1, Student o2) {
                			return o1.age - o2.age;
                		}
                	};
                }

                class Student {

                	int age;			// 나이
                	int classNumber;	// 학급

                	Student(int age, int classNumber) {
                		this.age = age;
                		this.classNumber = classNumber;
                	}

                }
            </code>
            => classNumber, age 각각을 비교하는 익명 객체 생성 후 적용 로직

    3-5 Comparable, Comparator 정렬 관계
        1) 오름차순
            - Java 에서의 정렬은 특별한 정의가 되어있지 않는 한 '오름차순'을 기준으로 한다.
            - compare 혹은 compareTo를 사용하여 객체를 비교할 경우 음수가 나오면 두 원소의 위치를 바꾸지 않는다는 것이다.
                ex) 배열 {1,3,2} 가 있다고 가정해보자.
                    정렬 알고리즘에 의해 index 1 원소와 index 2 원소를 비교한다 하였을 때 1-3의 결과인 음수 '-2'가 반환될 것이다.
                    결과가 음수인 경우 두 원소의 위치를 바꾸지 않는다.
                    그 다음 정렬 알고리즘에 의해 index 1, index 2 원소를 각각 비교하고 3-2의 결과인 양수'1'이 반환될 것이다.
                    결과가 양수인 경우 두 원소의 위치를 바꾸게 된다. 그러면 {1,2,3} 으로 오름차순으로 정렬된다.
            - 위 예시에 따르면 아래와 같은 규칙이 있음을 알게된다.
                - 음수일 경우 : 두 원소의 위치를 교환하지 않음
                - 양수일 경우 : 두 원소의 위치를 교환 함

            * ComparableExample.java & ComparatorExample.java 코드 참조

        2) 내림차순
            - 오름차순일 때의 반환값을 반대로 해주면 된다.
            - 두 값의 차가 양수가 된다면 음수로 바꿔 반환해주고, 만약 음수가 된다면 그 값을 양수로 바꾸어 반환해주면 된다.

            <code>
                // Comparable
                public int compareTo(MyClass o) {
                	// 방법 1
                	return -(this.value - o.value);

                	// 방법 2
                	return o.value - this.value;

                }

                // Comparator
                public int compare(Myclass o1, MyClass o2) {
                    // 방법 1
                	return -(o1.value - o2.value);

                	// 방법 2
                	return o2.value - o1.value;

                }
            </code>



* 출처 : - https://st-lab.tistory.com/243