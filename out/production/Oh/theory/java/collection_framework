1. collection framework
    : 배열의 단점을 보완해주는 컬렉션
    - 다수의 객체를 다루기위한 표준화된 프로그래밍 방식
    - 컬렉션을 쉽고 편리하게 다룰 수 있는 다양한 인터페이스와 클래스 제공
    - java.util 패키지에 포함되어있고 JDK1.2부터 제공됨
    - 이미 구현되어 있는 것을 사용함으로써 코딩 시간 감소, 코드 품질 보장, 유지보수 용이

2. List interface ( 순서 O 중복 O )
    : List 인터페이스는 순서가 있는 컬렉션이며 중복 요소를 포함할 수 있으며 인덱스로 모든 요소에 접근할 수 있다.
      ArrayList class, LinkedList class는 List 인터페이스로 구현되었다.

    - void add(int index, Object element) : 지정된 위치(index)에 객체(element)를 추가
    - boolean addAll(int index, Collection c) : 지정된 위치(index)에 컬렉션에 포함된 객체들을 추가
    - Object get(int index) : 지정된 위치(index)에 있는 객체를 반환
    - int indexOf(Object o) : 지정된 객체의 위치(index)를 반환 (List의 첫 번째 요소부터 순방향으로 찾음)
    - int lastIndexOf(Object o) : 지정된 객체의 위치(index)를 반환 (List의 마지막 요소부터 역방향으로 찾음)
    - ListIterator listIterator(), ListIterator listIterator(int index) : List의 객체에 접근할 수 있는 ListIterator를 반환
    - Object remove(int index) : 지정된 위치(index)에 있는 객체를 삭제하고 삭제된 객체를 반환
    - Object set(int index, Object element) : 지정된 위치(index)에 객체(element)를 저장
    - void sort(Comparator c) : 지정된 비교자(comparator)로 List 정렬
    - List subList(int fromIndex, int tolndex) : 지정된 범위(fromIndex부터 tolndex)에 있는 객체 반환

3. Set interface( 순서 X 중복 X )
    : Set 인터페이스는 중복 요소를 포함할 수 없으며 랜덤 액세스를 허용하지않아 iterator 또는 foreach를 이용하여 요소를 탐색할 수 있다.
      HashSet class, TreeSet class, LinkedHashSet class는 Set 인터페이스로 구현되었다.
      Set 인터페이스의 메소드는 Collection 인터페이스의 메소드와 동일하다.

      - boolean add(Object o) : 지정된 객체(o)를 Collection에 추가
      - boolean addAll(Collection c) : Collection의 객체들을 Collection에 추가 (합집합)
      - void clear() : Collection의 모든 객체 삭제
      - boolean contains(Object o) : 지정된 객체(o)가 Collection에 포함되어있는지 확인
      - boolean containsAll(Collection c) : Collection의 객체들이 Collection에 포함되어있는지 확인 (부분집합)
      - boolean equals(Object o) : 동일한 Collection인지 비교
      - int hashCode() : Collection의 hash code를 반환
      - boolean isEmpty() : Collection이 비어있는지 확인
      - Iterator iterator() : Collection의 iterator를 얻어서 반환
      - boolean reamove(Object o) : 지정된 객체 삭제
      - boolean removeAll(Collection c) : 지정된 Collection에 포함된 객체들을 삭제 (차집합)
      - boolean retainAll(Collection c) : 지정된 Collection에 포함된 객체만 남기고 다른 객체들은 Collection에서 삭제, 이 작업 후에 Collection에 변화가 있으면 true를 그렇지 않으면 false를 반환 (교집합)
      - int size() : Collection에 저장된 객체의 개수 반환
      - Object[] toArray() : Collection에 저장된 객체를 객체배열로 반환
      - Object[] toArray(Object[] a) : 지정된 배열에 Collection의 객체를 저장해서 반환

  3. Map interface (순서X, 중복 (key X, value O))
    : Map 인터페이스는 키와 값을 매핑힌다. 중복 키가 존재할 수  없으며 각 키는 하나의 값만 매핑할 수 있다.
      Map의 기본 연산은 put, get, containsKey, containsValue, size, isEmpty 등이 있다.
      HashMap class, TreeMap class, LinkedHashMap class는 Map인터페이스로 구현되었다.

      - void clear() : Map의 모든 객체 삭제
      - boolean containsKey(Object key) : 지정된 key객체와 일치하는 Map의 key 객체가 있는지 확인
      - boolean containsValue(Object value) : 지정된 value객체와 일치하는 Map의 value객체가 있는지 확인
      - Set entrySet() : Map에 저장되어있는 key-value쌍을 Map.Entry타입의 객체로 저장한 Set으로 반환
      - boolean equals(Object o) : 동일한 Map인지 비교
      - Object get(Object key) : 지정한 key객체에 대응하는 value객체를 찾아서 반환
      - int hashCode() : 해시코드를 반환
      - boolean isEmpty() : Map이 비어있는지 확인
      - Set keySet() : Map에 저장된 모든 key객체를 반환
      - Object put(Object key, Object value) : Map에 value객체를 key객체에 연결(mapping)하여 저장
      - void putAll(Map t) : 지정된 Map의 모든 key-value쌍을 추가
      - Object remove(Object key) : 지정한 key객체와 일치하는 key-value객체를 삭제
      - int size() : Map에 저장된 key-value쌍의 개수를 반환
      - Collection values() : Map에 저장된 모든 value객체를 반환

  4. List interface를 구현하는 클래스

    1) ArrayList<E> Class
     - resizable-array이면서 내부적으로 배열을 이용해 순차적으로 요소를 저장하며 비동기이다. (배열기반)
     - 동기화가 필요할때는 Collections.synchronizeList() 메소드를 통해 동기화가 보장되는 List를 반환받아 사용한다.
     - ArrayList 클래스와 유사한 Vector 클래스는 resizable-array이고 동기화를 보장한다.
     - 장점 : 배열은 구조가 간단하고 데이터를 읽는데 걸리는 시간(access time)이 짧다.
     - 단점 : 크기를 변경할 수 없다. 크기를 변경해야하는 경우에는 새로운 배열 생성 후 데이터를 복사해야 하며 큰 배열 생성시 메모리가 낭비된다.

     - ArrayList에 저장된 객체의 삭제과정
        (1) 삭제할 데이터 아래의 데이터를 한 칸씩 위로 복사해서 삭제할 데이터를 덮어쓴다.
        (2) 데이터가 모두 한 칸씩 이동했으므로 마지막 데이터는 null로 변경한다.
        (3) 데이터가 삭제되어 데이터의 개수가 줄었으므로 size의 값을 감소시킨다.
         * 마지막 데이터를 삭제하는 경우 , (1)의 과정(배열의 복사)은 필요없다.

    2) LinkedList<E> Class
     - ArrayList의 배열을 통한 요소 저장의 단점을 극복한 클래스로 내부적으로 연결리스트를 이용하여 요소를 저장한다.
     - 연결리스트는 저장된 요소가 비순차적으로 분포되며, 이러한 요소를 링크(link)로 연결하여 구성한다.
     - ArrayList의 주요 메소드와 Queue, Deque 속성과 메소드를 가지고 있고 비동기이다.
     - 동기화가 필요할때는 Collections.synchronizeList() 메소드를 통해 동기화가 보장되는 List를 반환받아 사용한다.
     - 데이터의 삭제 : 단 한번의 참조 변경만으로 가능
     - 데이터의 추가 : 한번의 Node객체생성과 두 번의 참조 변경만으로 가능

        (1) 단일 연결 리스트 (singly linked list)
            - 장점 : 요소의 저장과 삭제 작업이 다음 요소를 가리키는 참조만 변경하면 되므로 빠르게 처리 가능
            - 단점 : 현재 요소에서 이전 요소로 접근하기가 어려움
        (2) 이중 연결 리스트 (doubly linked list)
            - 이전 요소를 가리키는 참조도 가지는 이중 연결 리스트가 단일 연결 리스트보다 많이 사용됨

            ex)
            <code>
                import java.util.*;

                public class ExLinkedList {
                	public static void main(String[] args) {

                		LinkedList<String> linkList = new LinkedList<String>();

                		// add() 메소드를 이용한 요소의 저장
                		linkList.add("넷");
                		linkList.add("둘");
                		linkList.add("셋");
                		linkList.add("하나");

                		// for문과 get()메소드를 이용한 요소의 출력
                		for(int i=0; i<linkList.size();i++) {
                			System.out.print(linkList.get(i)+" ");
                		}System.out.println();

                		// remove() 메소드를 이용한 요소의 제거
                		linkList.remove(1);

                		// Enhanced for문과 get() 메소드를 이용한 요소의 출력
                		for(String e : linkList) {
                			System.out.print(e+" ");
                		}System.out.println();

                		// set() 메소드를 이용한 요소의 변경
                		linkList.set(2, "둘");

                		for(String e:linkList) {
                			System.out.print(e+" ");
                		}System.out.println();

                		// size() 메소드를 이용한 요소의 총 개수
                		System.out.println("리스트의 크기 : "+linkList.size());
                	}
                }

                /* 출력결과
                넷 둘 셋 하나
                넷 셋 하나
                넷 셋 둘
                리스트의 크기 : 3
                */
            </code>

    3) ArrayList vs LinkedList 성능 비교
      - 순차적으로 데이터를 추가, 삭제할때 : ArrayList가 빠름
      - 비순차적으로 데이터를 추가, 삭제할때 : LinkedList가 빠름
      - 접근시간(access time) : ArrayList가 빠름

    4) Vector <E> Class
     - ArrayList 클래스와 같은 동작을 수행하는 클래스
     - ArrayList와 마찬가지로 List 인터페이스를 상속, ArrayList 클래스에서 사용할 수 있는 메소드와 거의 같음
     - 현재에는 기존 코드와의 호환성을 위해서만 남아있으므로, 벡터 클래스보다는 ArrayList클래스 사용 권장

  5. Set interface를 구현하는 클래스
    1) HashSet <E> Class
        : Set 컬렉션 클래스에서 가장 많이 사용되는 클래스 중 하나로 해시 알고리즘(HashMap에서 설명)을 사용하여 검색 속도가 매우 빠름
         - HashSet 클래스는 내부적으로 HashMap 인스턴스를 이용하여 요소를 저장함
         - Set 인터페이스를 구현하므로, 요소를 순서에 상관없이 저장하고 중복된 값은 저장하지않음
         - 객체를 저장하기전에 기존에 같은 객체가 있는지 확인 후 같은 객체가 있으면 저장하지않고 없으면 저장함
         - 만약 요소의 저장 순서를 유지해야한다면 LinkedHashSet클래스를 이용할 것
         - boolean add(Object o) 메소드는 저장할 객체의 equals()와 hashCode()를 호출(=오버라이딩 되어있어야함)

    2) TreeSet <E> Class
        : 범위 검색과 정렬에 유리
         - TreeSet 클래스는 데이터가 정렬된 상태로 저장되어 범위 검색과 정렬에 유리한 이진 검색 트리(binary search tree)로 구현
         - LinkedList처럼 각 요소(node)가 나무(tree)형태로 연결된 구조
         - 이진 트리는 모든 노드가 최대 두개의 하위 노드를 갖음(부모-자식관계)
         - 이진 검색 트리는 부모보다 작은 값을 왼쪽에, 큰 값은 오른쪽에 저장
         - Set 인터페이스를 구현하므로, 요소를 순서에 상관없이 저장하고 중복된 값은 저장하지않음
         - HashSet보다 데이터 추가, 삭제에 시간이 더걸림 (반복적인 비교 후 저장하기때문에)
         - TreeMap이 근본이 되는 NavigableSet 구현 클래스

  6. Set interface를 구현하는 클래스
    - Map 인터페이스는 Collection 인터페이스와는 다른 저장 방식(key - value)을 가진다.
    - 순서X , key는 중복허용X, value는 중복허용

    1) HashMap <K, V> Class
         - Map 인터페이스를 구현한 대표적인 컬렉션 클래스이고, 비동기이며 null을 허용한다는 점을 제외하면 Hashtable과 유사함
         - 데이터를 키와 값의 쌍으로 저장하며 해시 알고리즘(hash algorithm)을 사용하여 검색 속도가 빠름
         - 순서를 유지하려면 LinkedHashMap클래스를 사용하면 됨
         - 해시테이블에 저장된 데이터를 가져오는 과정
            1) key로 해시함수를 호출해서 해시코드를 얻는다.
            2) 해시코드(해시함수의 반환값)에 대응하는 linkedlist를 배열에서 찾는다.
            3) 키와 일치하는 데이터를 찾는다.
            // 해시함수는 같은 키에 대해 항상 같은 해시코드를 반환해야함

    2) TreeMap <K, V> Class
        : 범위 검색과 정렬에 유리
         - TreeMap 클래스는 키와 값으로 저장되어 범위 검색과 정렬에 유리한 이진 검색 트리(binary search tree)로 구현
         - TreeSet처럼 데이터를 정렬(키)해서 저장하기때문에 저장시간이 길다. (TreeSet은 TreeMap을 이용해 구현)
         - Map이 필요할때는 주로 HashMap을 이용하고, 정렬이나 범위검색이 필요한 경우에 TreeMap을 이용

    3) TreeMap Method()
        - Map.Entry<K,V> ceilingEntry(K key) : 해당 맵에서 전달된 키와 같거나, 전달된 키보다 큰 키 중에서 가장 작은 키와 그에 대응하는 값의 엔트리를 반환함. 만약 해당하는 키가 없으면 null을 반환함
        - K ceilingKey(K key) : 당 맵에서 전달된 키와 같거나, 전달된 키보다 큰 키 중에서 가장 작은 키를 반환함. 만약 해당하는 키가 없으면 null을 반환함
        - void clear() : 해당 map의 모든 mapping 제거
        - boolean containsKey(Object key) : 해당 맵이 전달된 키를 포함하고있는지 확인
        - boolean containsValue(Object value) : 해당 맵이 전달된 값에 해당하는 하나 이상의 키를 포함하고있는지 확인

        - NavigableMap<K,V> descendingMap() : 해당 맵에 포함된 모든 매핑을 역순으로 반환
        - Set<Map.Entry<K,V>> entrySet() : 해당 맵에 포함된 모든 매핑을 Set 객체로 반환
        - Map.Entry<K,V> firstEntry() : 해당 맵에서 현재 가장 작은(첫 번째) 키와 그에 대응하는 값의 엔트리 반환
        - K firstKey() : 해당 맵에서 현재 가장 작은(첫 번째) 키를 반환
        - Map.Entry<K,V> floorEntry(K key) : 해당 맵에서 전달된 키와 같거나, 전달된 키보다 작은 키 중에서 가장 큰 키와 그에 대응하는 값의 엔트리를 반환함. 만약 해당하는 키가 없으면 null 반환

        - K floorKey(K key) : 해당 맵에서 전달된 키와 같거나, 전달된 키보다 작은 키 중에서 가장 큰 키를 반환함. 만약 해당하는 키가 없으면 null 반환
        - V get(Object key) : 해당 맵에서 전달된 키에 대응하는 값을 반환함. 만약 해당 맵이 전달된 키를 포함한 매핑을 포함하고 있지 않으면 null을 반환
        - SortedMap<K, V> headMap(K toKey) : 해당 맵에서 전달된 키보다 작은 키로 구성된 부분만을 반환
        - Map.Entry<K, V> higherEntry(K key) : 해당 맵에서 전달된 키보다 작은 키 중에서 가장 큰 키와 그에 대응하는 값의 엔트리를 반환함. 만약 해당하는 키가 없으면 null을 반환
        - K higherKey(K key) : 해당 맵에서 전달된 키보다 작은 키 중에서 가장 큰 키를 반환함. 만약 해당하는 키가 없으면 null을 반환

        - Set<K> keySet() : 해당 맵에 포함되어 있는 모든 키로 만들어진 Set 객체를 반환
        - Map.Entry<K, V> lastEntry() : 해당 맵에서 현재 가장 큰(마지막) 키와 그에 대응하는 값의 엔트리를 반환
        - K lastKey() : 해당 맵에서 현재 가장 큰(마지막) 키를 반환
        - Map.Entry<K, V> lowerEntry(K key) : 해당 맵에서 전달된 키보다 큰 키 중에서 가장 작은 키와 그에 대응하는 값의 엔트리를 반환함. 만약 해당하는 키가 없으면 null을 반환
        - K lowerKey(K key) : 해당 맵에서 전달된 키보다 큰 키 중에서 가장 작은 키를 반환함. 만약 해당하는 키가 없으면 null을 반환

        - Map.Entry<K, V> pollFirstEntry() : 해당 맵에서 현재 가장 작은(첫 번째) 키와 그에 대응하는 값의 엔트리를 반환하고, 해당 엔트리를 맵에서 제거함
        - Map.Entry<K, V> pollLastEntry() : 해당 맵에서 현재 가장 큰(마지막) 키와 그에 대응하는 값의 엔트리를 반환하고, 해당 엔트리를 맵에서 제거함
        - V put(K key, V value) : 해당 맵에 전달된 키에 대응하는 값으로 특정 값을 매핑함
        - V remove(Object key) : 해당 맵에서 전달된 키에 대응하는 매핑을 제거함
        - boolean remove(K key, V value) : 해당 맵에서 특정 값에 대응하는 특정 키의 매핑을 제거함

        - V replace(K key, V value) : 해당 맵에서 전달된 키에 대응하는 값을 특정 값으로 대체함
        - boolean replace(K key, V oldValue, V newValue) : 해당 맵에서 특정 값에 대응하는 전달된 키의 값을 새로운 값으로 대체함
        - int size() : 해당 맵의 매핑의 총 개수를 반환
        - SortedMap<K, V> subMap(K fromKey, K toKey) : 해당 맵에서 fromKey부터 toKey까지로 구성된 부분만을 반환함. 이때 fromKey는 포함되나, toKey는 포함되지 않음

  7. 객체를 정렬하는 interface
    1) Comparable <T> interface
         - 자바에서 같은 타입의 인스턴스를 서로 비교해야만 하는 클래스들이 모두 구현하는 인터페이스
         - Boolean을 제외한  래퍼 클래스, String, Time, Date와 같은 클래스의 인스턴스는 모두 정렬 가능
         - 정렬의 기본 순서는 오름차순
         - Method()
            (1) int compareTo(T o) : 해당 객체와 전달된 객체의 순서를 비교함

    2) Comparator <T> interface
         - Comparable 인터페이스와 같이 객체를 정렬하는 데 사용되는 인터페이스
         - Comparable과 달리 내림차순이나 다른 기준으로 정렬하고싶을 때 사용
         - Compare() 메소드를 재정의하여 사용하게됨
         - Method()
            (1) int compare(T o1, T o2) : 전달된 두 객체의 순서를 비교함
            (2) boolean equals(Object obj) : 해당 comparator와 전달된 객체가 같은지를 확인함
            (3) default Comparator<T> reversed() : 해당 comparator의 역순인 comparator를 반환함





* 출처 : https://prinha.tistory.com/entry/JAVA%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%9E%90%EB%B0%94-%EC%BB%AC%EB%A0%89%EC%85%98-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%ACjava-collection-framework
