1. Stream
    - 다양한 데이터 소스(Collection Framework)를 표준화된 방법으로 다루기 위한 것
    ( List/Set/Map => Stream )
    - 순서 : 1) 스트림 생성 2) 중간연산 3) 최종연산
    ex)
    List<Integer> list = Arrays.asList(1,2,3,4,5);
    Stream<Integer> intStream = list.stream();

2. Stream이 제공하는 기능 (중간연산과 최종 연산)
    - 중간 연산 : 연산결과가 스트림인 연산. 반복적으로 적용이 가능하다.
    - 최종 연산 : 연산결과가 스트림이 아닌 연산. 단 한번만 적용가능하다.(스트림의 요소를 소모)

3. Stream의 특징 1
    - 스트림은 데이터 소스(원본)로부터 데이터를 읽기만할 뿐 변경하지 않는다.(Read-Only)
    - 스트림은 Iterator처럼 일회용이다. (필요하면 다시 스트림을 생성해야 함)
      : 최종연산 이후 다시 사용할 수 없다.
    - 최종 연산 전까지 중간 수행되지 않는다.
      : 중간 연산 (어떤 작업인지 표시만 해놓음) 은 최종 연산이 마무리 되면 한번에 이루어진다.

4. Stream의 특징 2
    - 스트림은 작업을 내부 반복으로 처리한다.
        (대표적으로 foreach)
    - 스트림의 작업을 병렬로 처리 - 병렬스트림
    - 기본형 스트림 제공 - IntStream, LongStream, DoubleStream
        (오토박싱(int to Integer) & 언박싱(Integer to int)의 비효율이 제거된다. : Stream<Integer>보다 IntStream 사용)
        (숫자와 관련된 유용한 메서드를 Stream<T>보다 더 많이 제공한다.)

5. Stream 만들기 - Collection
    - Collection 인터페이스의 stream()으로 컬렉션을 스트림으로 변환
        : Stream<E> stream()
    - 객체 배열로부터 스트림 생성하기
        1) Stream<T> Stream.of(T...values) //가변인자
        2) Stream<T> Stream.of(T[])
        3) Stream<T> Arrays.stream(T[])
        4) Stream<T> Arrays.stream(T[] array, int startInclusive, int endExclusive)
            (startInclusive <= i <endExclusive)
    - 기본형 배열로부터 스트림 생성하기
        1) IntStream IntStream.of(int... values) //가변인자
        2) IntStream IntStream.of(int[])
        3) IntStream Arrays.stream(int[])
        4) IntStream Arrays.stream(int[] array, int startInclusive, int endExclusive)

6. Stream 만들기 - 임의의 수, 특정 범위의 수
    - 임의의 수 : 난수를 요소로 갖는 스트림 생성하기 : ints() // 무한 스트림
    - 특정 범위의 수 : range(int begin, int end), rangeClosed(int begin, int end)
    ex) IntStream intStream = IntStream.range(1,5) // 1,2,3,4
        IntStream intStream = IntStream.rangeClosed(1,5) // 1,2,3,4,5

7. Stream 만들기 - 람다식 iterate(), generate()
    - iterate(T seed, UnaryOperator<T> f)
        : iterate()는 이전 요소를 seed로 해서 다음 요소를 계산 한다.
        ex) iterate(0, n->n+2) //0,2,4,6...
    - generate(Supplier<T> s)
        : generate()는 seed를 사용하지 않는다.
        ex) generate(Math::random) // == (()-> Math.random())

8. Stream 연산 - 중간 연산
    1) 스트림 자르기 - skip(), limit()
     - skip(long n)         //앞에서부터 n개 건너뛰기
     - limit(long maxSize)  // maxSize 이후의 요소는 잘라냄
    2) 스트림 요소 걸러내기 - filter(), distinct()
     - filter(조건식)  // 조건에 맞지 않는 요소 제거
     - distinct()     // 중복제거
    3) 스트림 정렬하기 - sorted()
     - sorted()      // 스트림 요소의 기본 정렬로 정렬 (정렬 대상)
     - sorted(기준)   // 지정된 Comparator로 정렬    (정렬 기준)
    4) Comparator - comparing()
     - comparing() : 정렬 기준이 1개 일 때
     - thenComparing() : 정렬 기준이 2개 이상일 때
        : 처음에는 comparing()을 사용하고 이후에 thenComparing()을 사용한다.
    5) 스트림의 요소 변환하기 - map()
    6) 스트림의 요소를 소비하지 않고 엿보기 - peek()
     - 중간 연산이다. : 스트림을 소비하지 X
      cf) 최종연산 : foreach()
    7) Stream<Stream<String>>을 Stream<String>으로 변환 - flatMap()
        ex)
            Stream<String[]> strArrStrm = Stream.of(
                    new String[]{"abc", "def", "jkl"},
                    new String[]{"ABC", "GHI", "JKL"}
            );

            // Stream<Stream<String>> => Stream<String> 으로 변환
            Stream<String> stream = strArrStrm.flatMap(Arrays::stream);
            //소문자로 변경, 중복제거, 정렬 이후 출력
            stream.map(String::toLowerCase).distinct().sorted().forEach(System.out::println);











