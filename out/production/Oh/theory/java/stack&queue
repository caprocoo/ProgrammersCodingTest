Stack & Queue

1. Stack (LIFO - Last In First Out)
    : 책을 쌓는 것처럼 차곡차곡 쌓아 올린 형태의 자료구조
    - 같은 구조와 크기의 자료를 정해진 방향으로만 쌓을 수 있다.
    - top으로 정한 곳을 통해서만 접근이 가능하다.
    - 삽입하는 연산 : 'push'  /   삭제하는 연산 : 'pop'
    - 시간 순서에 따라 자료가 쌓여서 가장 마지막에 삽입된 자료가 가장 먼저 삭제된다.

2. Stack 활용 예시
    : 스택의 특징인 후입선출(LIFO)으 활용하여 여러 분야에서 활용 가능하다.
    - 웹 브라우저 방문기록 (뒤로 가기) : 가장 나중에 열린 페이지부터 다시 보여준다.
    - 역순 문자열 만들기 : 가장 나중에 입력된 문자부터 출력한다.
    - 실행 취소 (undo) : 가장 나중에 실행된 것부터 실행을 취소한다.
    - 후위 표기법 계산
    - 수식의 괄호 검사 (연산자 우선순위 표현을 위한 괄호 검사)

3. Queue (FIFO - First In First Out)
    : 사전적 의미로는 줄, 혹은 줄 서서 기다리는 것을 의미한다.
    ex) 놀이동산에서 줄을 서서 기다리는 것, 은행에서 먼저 온 사람을 창구에서 처리하는 것
    - 한쪽 끝에서 삽입 작업, 다른 쪽 끝에서는 삭제 작업이 이루어진다.
    - 삽입 연산만 이루어지는 곳 : rear / 삭제 연산만 수행 되는 곳 : front
    - 삽입하는 연산 : enQueue /   삭제하는 연산 : dnQueue
    - 큐는 들어올 때 rear로 들어오지만 front부터 빠지는 특성
    - 접근 방법은 가장 첫 원소와 끝 원소로만 가능
    - 가장 먼저 들어온 front 원소가 가장 먼저 삭제

4. Queue 활용 예시
    : 큐는 주로 데이터가 입력된 시간 순서대로 처리해야 할 필요가 있는 상황에 이용한다.
    - 우선순위가 같은 작업 예약 (프린터의 인쇄 대기열)
    - 은행 업무
    - 콜센터 고객 대기시간
    - 프로세스 관리
    - 너비 우선 탐색(BFS, Breadth-First Search) 구현
    - 캐시(Cache) 구현

   <code>
    </code>




* 출처 :
 - https://devuna.tistory.com/22
