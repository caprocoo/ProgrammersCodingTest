1. DI(Dependency Injection)이란?
    : 의존 관계 주입이라고도 하며, 어떤 객체가 사용하는 의존 객체를 직접 만들어
      사용하는 것이 아니라, 주입 받아 사용하는 방법이다.
      (new 연산자를 이용해서 객체를 생성하는 것)
    ex) 장난감들은 배터리가 있어야 움직일 수 있기 때문에 배터리에 의존한다고 할 수 있다.
        장난감들에게 배터리를 넣어주는 것을 의존성 주입이라고 생각하면 좋다.

    1) 배터리 일체형
        : 생성자에서만 의존성을 주입해주는 상황이기에 배터리가 떨어지게 되면
          장난감을 새로운 것으로 바꿔야 하기 때문에 유연하지 못하다.
        <code>
            // 배터리가 떨어지면 장난감을 새로 구입해야 한다.
            public class ElectronicCarToy{
                private Battery battery
                public ElectronicCarToy(){
                    battery = new NormalBattery();
                }
            }
        </code>
    2) 배터리 분리형
        <code>
            // 배터리가 떨어지면 배터리만 교체하면 된다.
            public class ElectronicCarToy{
                private Battery battery
                public ElectronicCarToy(){}
                public void setBattery(Battery battery){
                    this.battery = battery;
                }
            }
        </code>
    3) 배터리 분리형
        : setter와 생성자를 이용해서 외부에서 주입해주는 상황이기에 일체형보다 유연한 상황이다.
        <code>
            // 배터리가 떨어지면 배터리만 교체하면 된다.
            public class ElectronicCarToy{
                private Battery battery
                public ElectronicCarToy(Battery battery){
                    this.battery = battery;
                }
                public void setBattery(Battery battery){
                    this.battery = battery;
                }
            }
        </code>
2. Spring IoC Container?
    - 가장 중요한 인터페이스는 BeanFactory, ApplicationContext이다.
    - Application Component의 중앙 저장소이다.
    - Bean 설정 소스로부터 Bean 정의를 읽어드리고 Bean을 구성하고 제공한다.
    - Bean들의 의존 관계를 설정해준다.(객체의 생성을 책임지고, 의존성을 관리한다.)

    1) BeanFactory
        - 스프링 빈 컨테이너에 접근하기 위한 최상의 인터페이스
        - Bean 객체를 생성하고 관리하는 인터페이스
        - 구동될 때 Bean 객체를 생성하는 것이 아니라, 클라이언트의 요청이 있을 때 (getBean()) 객체를 생성한다.

    2) ApplicationContext
        - ListableBeanFactory를 상속하고 있다.
          (BeanFactory의 하위 인터페이스며 Bean을 Listable하게 보관하는 인터페이스)
        - ResourceLoader, ApplicationEventPublisher, MessageSource, Bean Lifecycle와 같은 기능을 제공한다.
        - 구동되는 시점에 등록된 Bean 객체들을 스캔하여 객체화한다.

3. 의존성 주입을 사용하는 이유
    - 재사용성을 높여주며 테스트에 용이하다.
    - 코드를 단순화 시켜주고 종속성이 감소하기 때문에 변경에 민감하지 않다.
    - 결합도는 낮추면서 유연성과 확장성은 향상시킬 수 있다.
    - 객체간의 의존관계를 설정할 수 있다.

4. Bean이란?
    1) 정의
        - Spring IoC Container가 관리하는 객체
        - 의존성 관리가 수워해지며 싱글톤의 형태이다.

    2) 빈을 등록하는 방법
        (1) xml 설정파일을 통한 등록
        <code>
            // 1. application.xml에 bean (bookService, bookRepository) 등록
            <?xml version="1.0" encoding="UTF-8"?>
            <beans xmlns="http://www.springframework.org/schema/beans"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
                   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

                <bean id="bookService" class="com.example.demo.BookService">
                    <property name="bookRepository" ref="bookRepository" />
                </bean>

                <bean id="bookRepository" class="com.example.demo.BookRepository">
                </bean>
            </beans>
        </code>
        => 예전에는 xml 파일에서 bean을 하나하나 등록하여 사용했다.

        <code>
            // 2. bookService, bookRepository가 Bean으로 등록되어 있는지 확인
            import org.springframework.context.ApplicationContext;
            import org.springframework.context.support.ClassPathXmlApplicationContext;
            import java.util.Arrays;

            public class DemoApplication {

                public static void main(String[] args) {
                    ApplicationContext context = new ClassPathXmlApplicationContext("application.xml");
                    String[] getBeanDefinitionNames = context.getBeanDefinitionNames();
                    System.out.println(Arrays.toString(getBeanDefinitionNames));
                }
            }
        </code>

        (2) Java 코드를 이용해서 Bean 등록
        <code>
            import org.springframework.context.annotation.Bean;
            import org.springframework.context.annotation.Configuration;

            @Configuration
            public class ApplicationConfig {

                @Bean
                public BookRepository bookRepository() {
                    return new BookRepository();
                }

                @Bean
                public BookService bookService() {
                    BookService bookService = new BookService();
                    bookService.setBookRepository(bookRepository());
                    return bookService;
                }
            }
        </code>
        => @Configuration이라는 어노테이션을 달고 @Bean 어노테이션과 함께 코드를 작성하면 Bean으로 등록이 된다.


* 출처 : - https://devlog-wjdrbs96.tistory.com/165?category=882236