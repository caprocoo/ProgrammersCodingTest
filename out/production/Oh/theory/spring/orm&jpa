1. JPA이란?
    - JPA는 자바에서 ORM(Object-Relational Mapping) 기술 표준으로 사용되는 인터페이스 모음이다.
    - 실제적으로 구현된 것이 아닌 구현된 클래스와 매핑을 해주기 위해 사용되는 프레임워크이다.
    - 인터페이스이기 때문에 Hibernate, OpenJPA 등이 JPA를 구현한다.

2. ORM이란?
    - 애플리케이션 Class와 RDB(Relational DataBase)의 테이블을 매핑한다는 뜻이다.
    - 기술적으로는 애플리케이션의 객체를 RDB 테이블에 자동으로 영속화 해주는 것이다.

    1) 장점
        - SQL문이 아닌 Method를 통해 DB를 조작할 수 있어 개발자가 비즈니스 로직을 구성하는데만 집중할 수 있다.
        - Query와 같이 필요한 선언문, 할당 등의 부수적인 코드가 줄어들어 코드의 가독성을 높인다.
        - 오직 객체지향적인 접근만 고려하기 때문에 생산성이 증가된다.
        - 매핑하는 정보가 Class로 명시되었기 때문에 ERD를 보는 의존도를 낮출 수 있고 유지보수&리팩토링에 유리하다.
        - 예를 들어 MySQL DB를 사용하다 PostgreSQL로 변환할 때 ORM을 사용하면 쿼리를 수정할 필요가 없다.

    2) 단점
        - 프로젝트의 규모가 크고 복잡하여 설계가 잘못된 경우, 속도 저하 및 일관성을 무너뜨리는 문제점이 생긴다.
        - 복잡하고 무거운 Query는 속도를 위해 별도의 튜닝이 필요하기 때문에 결국 SQL문을 써야할 수 있다.
        - 학습비용이 비싸다.

3. 왜 JPA인가?
    : 가장 큰 것은 SQL이 아닌 객체 중심으로 개발할 수 있다는 것이다!

    1) 생산성
        - JPA를 자바 컬렉션에 객체를 저장하든 JPA에 저장할 객체를 전달한다.
        - CRUD와 같은 지루하고 반복적인 일을 JPA가 대신 처리해준다.
        - DDL문 자동 생성해준다.

    2) 유지보수
        - 엔티티에 필드를 추가 시 등록, 수정, 조회 관련 코드를 모두 변경해야하지만
          JPA를 사용하면 이런 과정은 JPA가 대신 처리한다.

    3) 패러다임 불일치 해결
        - 상속, 연관관계, 객체 그래프 탐색, 비교하기 같은 패러다임 불일치를 해결한다.

    4) 성능
        - 애플리케이션과 데이터베이스 사이에 존재함으로 여러 최적화 시도가 가능하다.

    5) 데이터 접근 추상화와 벤더 독립성
        - 데이터베이스 기술에 종속되지 않도록 한다.
        - 데이터베이스를 변경하면 JPA에게 다른 데이터베이스를 사용한다고 알려주면 된다.




* 출처 : - https://dbjh.tistory.com/77
        - https://ultrakain.gitbooks.io/jpa/content/chapter1/chapter1.3.html

**JPA 연습 링크 : https://ultrakain.gitbooks.io/jpa/content/chapter1/chapter1.2.html