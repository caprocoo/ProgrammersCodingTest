1. async & await?
    : 기존의 비동기 처리 방식인 콜백 함수와 프로미스의 단점을 보완한 문법이다.
    => 읽기 좋은 코드가 되었다!!

2. 기본 문법
    <code>
        async function 함수명() {
          await 비동기_처리_메서드_명();
        }
    </code>
    - 먼저 함수의 앞에 async라는 예약어를 붙인다.
    - 그러고 나서 함수의 내부 로직 중 HTTP 통신을 하는 비동기 처리 코드 앞에 await을 붙인다.
    - 주의할 점은 비동기 처리 메서드가 꼭 프로미스 객체를 반환해야 await이 의도한 대로 동작한다.
    - 일반적으로 await의 대상이 되는 비동기 처리 코드는 Axios 등 프로미스를 반환하는 API 호출 함수이다.

3. 간단 예제
    <code>
        function fetchItems() {
          return new Promise(function(resolve, reject) {
            var items = [1,2,3];
            resolve(items)
          });
        }

        async function logItems() {
          var resultItems = await fetchItems();
          console.log(resultItems); // [1,2,3]
        }
    </code>
    - 여기서 fetchItems()는 프로미스 객체를 반환하는 함수이며 프로미스가 이행되며 결과 값은 items 배열이 된다.
    - logItems() 함수를 실행하면 fetchItems() 함수의 결과 값인 items 배열이 resultItems 변수에 담기고 콘솔에는 [1,2,3]이 출력된다.
    - await을 사용하지 않았다면 콜백 함수나 .then()을 사용했어야 한다.

4. 실용 예제
    - async&await 문법이 가장 빛을 발하는 순간은 여러 개의 비동기 처리 코드를 다룰 때이다.
    - 아래와 같이 각각 사용자와 할 일 목록을 받아오는 HTTP 통신 코드가 있다.
    <code>
        function fetchUser() {
          var url = 'https://jsonplaceholder.typicode.com/users/1'
          return fetch(url).then(function(response) {
            return response.json();
          });
        }

        function fetchTodo() {
          var url = 'https://jsonplaceholder.typicode.com/todos/1';
          return fetch(url).then(function(response) {
            return response.json();
          });
        }
    </code>
    - 여기서 살펴볼 로직은 아래와 같다.
        1) fetchUser()를 이용하여 사용자 정보 호출
        2) 받아온 사용자 아이디가 1이면 할 일 정보 호출
        3) 받아온 할 일 정보의 제목을 콘솔에 출력

    <code>
        async function logTodoTitle() {
          var user = await fetchUser();
          if (user.id === 1) {
            var todo = await fetchTodo();
            console.log(todo.title); // delectus aut autem
          }
        }
    </code>
    => logTodoTitle()를 실행하면 콘솔에 deletus aut autem 이 출력될 것이다.

5. async&await 예외 처리
    : try catch를 이용한다.
    <code>
        async function logTodoTitle() {
          try {
            var user = await fetchUser();
            if (user.id === 1) {
              var todo = await fetchTodo();
              console.log(todo.title); // delectus aut autem
            }
          } catch (error) {
            console.log(error);
          }
        }
    </code>
    => 위의 코드를 시랳ㅇ하다가 발생한 네트워크 통신 오류뿐만 아니라 간단한 타입 오류 등의 일반적인 오류까지도 catch로 잡아낼 수 있다.
* 출처 : - https://joshua1988.github.io/web-development/javascript/js-async-await/