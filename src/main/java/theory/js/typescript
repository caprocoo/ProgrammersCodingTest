1. typescript란?
    : 타입스크립트는 자바스크립트에 타입을 부여한 언어이다.
    => 자신이 원하는 타입을 정의하고 프로그래밍하면 자바스크립트로 컴파일 되어 실해할 수 있다.
    - 동적인 자바스크립트 언어에 타입을 미리 부여함으로써 컴파일 시 에러를 잡을 수 있다.

2. 장점
    1) 에러 예방
        - 타입스크립트는 타입을 부여하기 때문에 코드 작성 시에 알맞지 않은 타입을 넣거나,
          혹은 타입을 넣지 않았을 경우 사전에 IDE에서 오류라고 경고를 준다.
        - 사전에 오류를 디버깅 할 수 있고, 생산적인 측면에서 효과적이다.

    2) 실행 속도
        - 자바스크립트는 동적 타입의 인터프리티 언어이다.
          이 말은 런타임(실행) 시에 타입을 결정해서 적용된다는 것인데,
          이것은 '컴퓨터'에게 오류가 있는지 없는지 체크하라고 일을 맡긴 것과 같기 때문에 실행속도가 오래걸린다.
        - 타입스크립트는 '사람'이 코드 작성 시에 오류를 체크하고 타입을 미리 결정하기 때문에
          기계가 할 일을 덜어 실행 속도가 매우 빠르다는 장점이 있다.

    3) 안정성 & 협업용이성
        - 자바스크립트는 'let numberOrString'와 같이 작성하였을 경우 같이 협업하는 사람이나
          혹은 다른 사람이 코드를 읽을 경우 타입이 어떤 것인지 짐작하기 어렵다.
        - 또한 자바스크립트는 실행 중에 버그를 찾기 때문에 테스트 때 미처 발견하지 못한 에러가 운영 중에 발견될 수도 있다.

    4) 슈퍼셋
        - 타입스크립트는 자바스크립트의 슈퍼셋, 즉 '자바스크립트+알파'이다.
        - 자바스크립트와는 100% 호환이 되며 클래스, 인터페이스 등 객체지향 프로그래밍 패턴을 제공한다.

3. 단점
    1) 초기 세팅
        : 자바스크립트에 비해 초기 세팅이 까다롭다.
          (컴파일 옵션, 모듈 사용 설정 등)

    2) 새로운 언어
        : 자바스크립트+알파 이기에 새롭게 언어를 배워 적용해야 한다.

    3) 더 많은 코드
        : 타입스크립트는 자바스크립트보다 코드를 더 많이 작성해야 한다.
          이는 개발 기간이 늘어나며, 코드를 더 작성하기 때문에 가독성이 더 떨어지는 부작용도 있다.


4. 기본 TS 타입 선언

    <code>
        let str: string = 'hello';                       //문자열
        let num: number = 100;                           //숫자

        let arr: Array<number> = [10,20,30];             //배열1
        let arr2: number[] = [10,20,30];                 //배열2
        let arr3: Array<string> = ["lion", "tiger"];     //배열3
        let arr4: [string, number] = ["hyeonseong", 180];//배열4

        let obj: object = {name:"hyeonseong", age:28};   //객체1
        let person: {name:string, age:number};           //객체2

        let isAvailable: boolean = true;                 //Boolean
    </code>

5. 함수 선언
    <code>
        //parameter와 return 값에 대해 타입 선언을 할 수 있다.
        function sum(a: number, b:number) : number{
            return a+b;
        }

        //optional parameter일 경우 '?'를 사용한다.
        function log(time: string, result?: string, option?:string){
            console.log(time, result, option);
        }
        log("2021-10-04", "success";
    </code>

6. 인터페이스(interface)
    : interface는 자주 사용하는 타입들을 object 형태의 묶음으로 정의해 새로운 타입을 만들어 사용하는 기능이다.
    <code>
        // interface 선언
        interface User{
            age: number;
            name: string;
        }

        //변수 활용
        const hs: User = {age:28, name: 'hyeonseong'};

        //함수 인자로의 활용
        function getUser(user: User){
            console.log(user);
        }
        getUser({age:28, name:'hyeonseong'});

        //함수 구조 활용
        interface Sum{
            (a:number, b:number):number;
        }
        let sumFunc : Sum;
        sumFunc = function(a:number, b:number) :number{
            return a+b;
        }

        //배열 활용
        interface StringArray{
            [index: number]: string;
            let arr: StringArray = ['a', 'b', 'c'];
        }

        //객체 활용
        interface StringRegexObject{
            [key: string]: RegExp;
        }

        const obj: StringRegexObject {
          cssFile: /\.css$/,
          jsFile: /\.js$/
        }

        //interface 확장(extends 사용)
        interface Person{
            name: string;
            age: number;
        }
        interface Developer extends Person{
            skill: string;
        }
        const juniorDeveloper = {
            name: 'hyeonseong',
            age: 28,
            skill: 'basketball'
        }
    </code>

7. 타입 별칭(type aliases)
    : type 키워드는 interface와는 다르게 새로운 타입을 생성하는 것이 아닌 별칭을 부여하는 것이다.
      extends 키워드는 사용할 수 없다.
    <code>
        //타입 별칭 선언 및 활용
        type MyString = string;
        const str: MyString = 'I like basketball';

        type Todo = {
            id: string;
            title: string;
            done: boolean;
        }
        function getTodo(todo: Todo){
            console.log(todo);
        }
    </code>

8. 연산자 (Operator)
    - Union Type
      : 한 가지 이상의 type으 선언하고자 할 때 사용할 수 있다. '|' 기호를 사용.
        <code>
            //value 인자 타입은 string 혹은 number
            function logMessage(value:string | number){
                if(typeof value === 'string'){
                    value.toString();
                }else if(typeof value === 'number'){
                    value.toLocaleString();
                }else{
                    throw new TypeError('value must be string or nubmer');
                }
            }
            logMessage('hello');
            logMessage(100);
        </code>

    - Intersection Type
      : 합집합과 같은 개념, 호출의 경우 함수 인자에 명시한 type을 모두 제공해야 한다.
        '&' 기호를 사용.
        <code>
            interface Zoo{
                name: string;
                location: string;
                price: number;
            }

            interface Animal{
                name: string;
                count: number;
            }

        </code>
9. Enum
    : enum 키워드를 사용하면 일종의 default 값을 선언할 수 있다.
    <code>
        //숫자형 Enum
        //자동으로 0에서 1씩 증가하는 값을 부여
        enum Shoes {
          Nike,				// 0
          Adidas,			// 1
          NewBalance	// 2
        }

        const myShoes = Shoes.Nike;	// 0

        //문자형 Enum
        enum Player {
          Koke = '코케',
          Saul = '사울'
        }

        const player = Player.Koke;	// 코케
    </code>
* 출처 : - https://fomaios.tistory.com/entry/TS-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8TypeScript%EB%9E%80
            : 1~3
        - https://yeomkyeorae.github.io/typesciprt/basic_typescript/
            : 4~