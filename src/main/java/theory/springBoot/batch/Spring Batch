1. Spring Batch
    - Spring Batch는 로깅/추적, 트랜잭션 관리, 작업 처리 통계, 작업 재시작, 건너뛰기, 리소스 관리 등 대용량 레코드 처리에 필수적인 기능을 제공한다.
    - 또한 최적화 및 파티셔닝 기술을 통해 대용량 및 고성능 배치 작업을 가능하게 하는 고급 기술 서비스 및 기능을 제공한다.
    - Spring Batch에서 배치가 실패하여 작업 재시작을 하게 된다면 처음부터가 아닌 실패한 지점부터 실행을 하게 된다.
    - 중복 실행을 막기 위해 성공한 이력이 있는 Batch는 동일한 Parameters로 실행 시 Exception이 발생하게 된다.


2. Spring Batch Dictionary
    1) Job
        - Job은 배치처리 과정을 하나의 단위로 만들어 놓은 객체이다.
        - 또한 배치처리 과정에 있어 전체 계층 최상단에 위치하고 있다.

    2) JobInstance
        - JobInstance는 Job의 실행의 단위를 나타내며, Job을 실행시키게 되면 하나의 JobInstance가 생성되게 된다.

    3) JobParameters
        - JobInstance를 구별하기 위한 객체이며, JobInstance 구별 외에도 개발자 JobInstance 에 전달되는 매개변수 역할도 한다.

    4) JobExecution
        - JobExecution은 JobInstance에 대한 실행 시도에 대한 객체이다.
        - JobInstance 실행에 대한 상태, 시작시간, 종료시간, 생성시간 등의 정보를 담고 있다.

    5) Step
        - Step은 Job의 배치처리를 정의하고 순차적인 단계를 캡슐화 한다.
        - Job은 최소한 1개 이상의 Step을 가져야 하며 Job의 실제 일괄 처리를 제어하는 모든 정보가 들어있다.

    6) StepExecution
        - StepExecution은 JobExecution과 동일하게 Step 실행 시도에 대한 객체를 나타낸다.
        - 하지만 Job이 여러개의 Step으로 구성되어 있을 경우 이전 단계의 Step이 실패하게 되면 다음 단계가 실행되지 않음으로 실패 이후 StepExecution은 생성되지 않는다.
        - StepExecution 또한 JobExecution과 동일하게 실제 시작이 될 때만 생성된다.
        - StepExecution에는 JobExecution에 저장되는 정보 외에 read 수, write 수, commit 수, skip 수 등의 정보들도 저장이 된다.

    7) ExecutionContext
        - ExecutionContext란 Job에서 데이터를 공유 할 수 있는 데이터 저장소이다.
        - Spring Batch에서 제공하는 ExecutionContext는 JobExecutionContext, StepExecutionContext 2가지 종류가 있으나 이 두 가지는 지정되는 범위가 다르다.
        - JobExecutionContext의 경우 Commit 시점에 저장되는 반면 StepExecutionContext는 실행 사이에 저장이 되게 된다.
        - ExecutionContext를 통해 Step간 Data 공유가 가능하며 Job 실패시 ExecutionContext를 통한 마지막 실행 값을 재구성 할 수 있다.

    8) JobRepository
        - JobRepository는 위에서 말한 모든 배치 처리 정보를 담고있는 매커니즘이다.
        - Job이 실행되게 되면 JobRepository에 JobExecution과 StepExecution을 생성하게 되며 JobRepository에서 Execution 정보들을 저장하고 조회하며 사용하게 된다.

    9) JobLauncher
        - JobLauncher는 Job과 JobParameters를 사용하여 Job을 실행하는 객체이다.

    10) ItemReader
        - ItemReader는 Step에서 Item을 읽어오는 인터페이스이다.
        - ItemReader에 대한 다양한 인터페이스가 존재하며 다양한 방법으로 Item을 읽어 올 수 있다.

    11) ItemWriter
        - ItemWriter는 처리 된 Data를 Writer 할 때 사용한다.
        - Writer는 처리 결과물에 따라 Insert가 될 수도 Update가 될 수도 Queue를 사용한다면 Send가 될 수도 있다.
        - Writer 또한 Read와 동일하게 다양한 인터페이스가 존재하며, Writer는 기본적으로 Item을 Chunk로 묶어 처리하고 있습니다.

    12) ItemProcessor
        - Item Processor는 Reader에서 읽어온 Item을 데이터를 처리하는 역할을 하고 있다.
        - Processor는 배치를 처리하는데 필수 요소는 아니며 Reader, Writer, Processor 처리를 분리하여 각각의 역할을 명확하게 구분하고 있다.



* 출처 : - https://khj93.tistory.com/entry/Spring-Batch%EB%9E%80-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B3%A0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0