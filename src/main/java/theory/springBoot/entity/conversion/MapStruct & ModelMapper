* MapStruct 와 ModelMapper 는 JPA 에서 Entity 를 DTO 로, DTO 를 Entity 로 변환 해주는 라이브러리이다.

1. ModelMapper
    1) 의존성 주입 - build.gradle
        <code>
            implementation 'org.modelmapper:modelmapper:2.4.2'
        </code>

    2) ModelMapper Config Class 구현
        <code>
            import org.modelmapper.ModelMapper;
            import org.modelmapper.convention.MatchingStrategies;
            import org.springframework.context.annotation.Bean;
            import org.springframework.context.annotation.Configuration;

            @Configuration
            public class ModelConfig {

                @Bean
                public ModelMapper modelMapper() {
                    ModelMapper mapper = new ModelMapper();

                    mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.LOOSE);
                    return mapper;
                }
            }
        </code>

    3) Entity to DTO
        <code>
            import java.util.List;
            import java.util.stream.Collectors;
            import java.util.stream.Stream;

            import org.modelmapper.ModelMapper;

            Stream<User> userStream = userRepository.findAll();
            List<UserDTO> = userStream.map(entity -> mapper.map(entity, UserDTO.class)).collect(Collectors.toList());
        </code>
        => MapStruct 에 비해 성능(속도)이 떨어지며 컴파일 단계에서 오류를 처리할 수 없는 단점이 있다.
           그리고 LOOSE 매핑 설정의 경우 userNM, userPhone 와 같이 공통된 prefix 를 사용하는 경우 매핑이 제대로 이루어지지 않는 단점이 있다.

2. MapStruct

    1) gradle 의존성 주입
        <code>
            /**lombok 사용 시 추가*/
            implementation group: 'org.projectlombok', name: 'lombok-mapstruct-binding'

            /**map struct */
            compileOnly "org.mapstruct:mapstruct:1.4.2.Final"
            annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
        </code>

    2) 공통 Mapper 처리를 위한 Generic interface 설정
        <code>
            public interface GenericMapper<DTO, Entity> {

                DTO toDTO(Entity entity);

                Entity toEntity(DTO dto);

                ArrayList<DTO> toDtoList(List<Entity> list);

                ArrayList<Entity> toEntityList(List<DTO> dtoList);

                /**Null 값이 전달될 경우 변화 시키지 않도록 설정 */
                @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
                void updateFromDto(DTO dto, @MappingTarget Entity entity);
            }
        </code>

    3) mapper 설정
        <code>
            import org.mapstruct.Mapper;
            import org.mapstruct.factory.Mappers;

            @Mapper(componentModel="spring")
            public interface UserMapper extends GenericMapper<UserDTO, User>{
                UserMapper INSTANCE = Mappers.getMapper(UserMapper.class);
            }
        </code>
        => 이렇게 설정하게 되면 MapStruct 는 build 시 MapperImpl class 를 자동으로 생성해준다.
           generated-sources/annotations/{mapper 를 설정한 package 명} 에 자동으로 생성된다.
           해당 경로에 DTO to Entity 와 Entity to DTO 관련된 메서드들이 자동으로 추가된 것을 확인할 수 있다.

           * 하지만 명칭이 같지 않은 경우, 예를 들어 Entity Class 에 @EmbeddedId 를 사용하여 복수키를 설정할 경우
             DTO 와 매핑이 정상적으로 동작하지 않아 자동으로 생성된 매퍼에 객체 매핑 코드가 추가되지 않는다.

    4) Entity to DTO
        <code>
            ArrayList<UserDTO> user = UserMapper.INSTANCE.toDtoList(userRepository.findAll());
        </code>

3. MapStruct - EmbeddedId 경우
    1) 매퍼 코드에 @Mapping 사용하여 매핑 설정
        <code>
            import org.mapstruct.Mapper;
            import org.mapstruct.Mapping;
            import org.mapstruct.factory.Mappers;

            @Mapper(componentModel="spring")
            public interface UserMapper extends GenericMapper<UserDTO, User>{
                UserMapper INSTANCE = Mappers.getMapper(UserMapper.class);

                /** 추가 설정*/
                @Mapping(source= "UserAuthKey.systemCode", target = "systemCode")
                @Mapping(source= "systemInfo.systemName", target = "systemName")
                AuthDTO userAuthToAuthDTO(UserAuth userAuth);
            }
            source가 매개변수로
        </code>
        => source 가 매개변수로 전달받은 Entity 의 컬럼 경로, target 은 DTO 의 변수명으로 설정하면 해당 값이 매핑이 된다.
           기존에 자동으로 생성된 mapperImpl 코드에서도 setter 가 생성됨을 알 수 있다.

* 출처 : - https://aljjabaegi.tistory.com/669