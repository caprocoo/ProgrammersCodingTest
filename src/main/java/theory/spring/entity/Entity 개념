1. 연관관계 매핑
    1) 연관관계란?
        - DB 테이블 간의 관계를 나타내기 위해서는 FK를 사용하는데 만약, Entity 클래스로 표현하면 아래와 같다.
        <code>
            public class Member {
            	/*...*/
                private Long teamId;
            }

            public class Team {
                private Long id;
                /*...*/
            }
        </code>

        - 회원의 Team을 가져오기 위해서는 매번 teamId를 빼와서 Team 쪽으로 쿼리를 날려야 한다.
          하지만 이는 객체지향으로는 보기 어렵다.
        - 객체를 테이블에 맞추어 데이터 중심으로 모델링하면 객체간 협력 관계를 만들 수 없다.
        - 객체간 연관관계를 나타내기엔 아래와 같은 코드가 더 좋다.
        <code>
            public class Member {
                /*...*/
                private Team team;
            }
        </code>

        - 양 Entity 가 서로의 참조를 가지는 경우 : 양방향 연관관계
        - 한 Entity 가 다른 Entity 참조를 가지는 경우 : 단방향 연관관계

    2) 양방향 연관관계 (일대다, 다대일)
        - '회원, 주문 Entity 가 있고 한 회원은 여러 주문을 할 수 있어야 한다.' 라는 요구사항이 존재한다.
        - 회원 Entity : 일대다 관계 / 주문 Entity : 다대일
        - 양방향 연관관계에서는 연관관계의 주인을 정하는 것이 중요하다.
        - 사실 객체에는 양방향 연관관계는 없고 서로 다른 단방향 연관관계 2개를 잘 묶어서 양방향으로 보이게 하는 것 뿐이다.
        - DB 에서는 FK 하나로 연관관계가 성립되기에 객체와 DB 간에 차이점이 생기기 때문에
          JPA에서는 연관관계 중에 한 객체를 정해서 FK 를 관리하게 해야하고 이를 연관관계 주인이라고 한다.
        - 즉, FK 가 있는 곳을 연관관계 주인이라고 한다.
          연관관계의 주인이 FK 를 관리할 수 있고, 주인이 아닌 곳에서는 mappedBy 속성을 통해 읽기만 가능하다.
        <code>
             // 연관관계의 주인 (Member의 FK를 가짐)
             public class Order {
                 /*...*/
                 @ManyToOne(fetch = LAZY)
                 @JoinColumn(name = "member_id")
                 private Member member;
             }

             // 연관관계의 거울
             public class Member {
                 /*...*/
                 @OneToMany(mappedBy = "member") // Order의 member 필드와 매핑
                 private List<Order> orders = new ArrayList<>();
             }
             // 실제 member.getOrders().add(order) 를 하고 persist() 해도 null이 저장된다.
             // (연관관계의 주인인 Order.member 에 들어가지 않았기 때문)
        </code>

    3) 단방향 연관관계 (일대일)
        - 일대일 관계는 둘 중 어디든 FK를 둘 수 있으며, 더 많이 조회하는 Entity에 FK를 둔다.

    4) 다대다 관계
        - 실무에서는 @ManyToMany를 사용하지 않는데, ManyToMany를 사용하면 중간에 mapping Table이 생길 수 밖에 없다.
          이 테이블ㅇ레는 등록일, 수정일 같은 필드가 없이 mapping key 만 존재해야 해서 운영상으로 어려움이 크다.

2. 값 타입 (Embedded Type)
    1) Embedded Type 이란?
        - Embedded Type 이란 새로운 값 탕비을 직접 정의해서 사용하는 타입이다.
        - Embedded를 사용하지 않았을 때
        <code>
            @Entity
            public class Member {

              @Id @GeneratedValue
              private Long id;
              private String name;

              // 근무 기간
              @Temporal(TemporalType.DATE)
              Date startDate;
              @Temporal(TemporalType.DATE)
              Date endDate;

              // 집 주소 표현
              private String city;
              private String street;
              private String zipcode;
              // ...
            }
        </code>
        => '회원 엔티티는 이름, 근무 시작일, 근무 종료일, 주소 도시, 주소 번지, 주소 우편 번호를 가진다.' 라고 표현할 수 있다.
            하지만 여기서 근무 시작일과 우편 번호는 서로 아무 관련이 없다.
        => 회원이 상세한 데이터를 그대로 가지고 있는 것은 객체지향적이 않으며 응집력만 떨어뜨린다.
        => 다만 아래 코드와 같이 근무 기간, 주소 같은 타입이 있다면 코드가 더 명확해진다.

        - Embedded를 사용할 때
        <code>
            // 임베디드 타입 사용
            @Entity
            public class Member {

              @Id @GeneratedVAlue
              private Long id;
              private String name;

              @Embedded
              private Period workPeriod;	// 근무 기간

              @Embedded
              private Address homeAddress;	// 집 주소
            }

            // 기간 임베디드 타입
            @Embeddable
            public class Peroid {

              @Temporal(TemporalType.DATE)
              Date startDate;
              @Temporal(TemporalType/Date)
              Date endDate;
              // ...

              public boolean isWork (Date date) {
                // .. 값 타입을 위한 메서드를 정의할 수 있다
              }
            }

            @Embeddable
            public class Address {

              @Column(name="city") // 매핑할 컬럼 정의 가능
              private String city;
              private String street;
              private String zipcode;
              // ...
            }
        </code>

    2) Embedded Type Entity 사용
        - Address 와 같은 경우 값을 표현하기 위한 타입으로 만들 수 있다.
        - 하지만 값 타입은 변경하면 안되며, 생성시에만 값을 주고 변경 불가능하도록 만들어야 한다.
        <code>
            @Embeddable
            @Getter
            public class Address {
                private String city;
                private String street;
                private String zipcode;

                protected Address() {}
                public Address(String city, String street, String zipcode) { /*...*/}
            }

            public class Member {
                /*...*/
                @Embedded
                private Address address;
            }
        </code>
        => 값 타입에는 @Embeddable, 사용하는 필드에는 @Embedded 를 준다.

3. Entity 설계 시 주의점
    1) Entity에서는 가급적 Setter를 쓰지 않는다.
        - 변경 포인트가 많아지고 유지보수가 어려워진다.

    2) Enum 타입 사용시 유의점
        * @Enumberated(EnumType.ORDINAL) vs @Enumberated(EnumType.STRING)
            - 무조건 STRING을 사용한다.
            - ORDINAL 사용 시 0,1,2 이런식으로 내부적으로 숫자로 타입을 나누는데
              이 경우 중간에 새로운 type을 추가할 경우 기존에 만들어 놨던 0,1,2 순서와 꼬이게 된다면 난리가 난다.

    3) 모든 연관관계의 FetchType은 LazyLoading으로 설정한다.
        - EAGER(즉시로딩)은 예측이 어렵고 어떤 SQL 이 실행될지 추적이 어렵다.
        - EAGER 는 조회 쿼리를 실행하면 관련된 애들을 모두 join 해서 가져온다. (JPQL)
        - 예를 들어 select * from order limit 100을 수행할 때, EAGER의 경우 order가 member를 가져오기 위해 쿼리 100개가 같이 날라간다.
          이를 N+1 문제 라고 한다.
        - 실무 상의 모든 연관관계는 LAZY(지연로딩)으로 설정해야한다.
        - OneToOne, ManyToOne 의 경우 EAGER가 default 이므로 직접 LAZY로 설정해야한다.
        - 하지만 만약 연관관계에서 필요한 entity를 한 번에 가져오고 싶은 경우는 FETCH JOIN 을 사용한다.
            => EAGER를 고려하지 말자.

    4) Collection 은 필드에서 초기화한다.
        - Collection 은 생성자나 setter 등이 아닌 필드에서 초기화 하는 것이 hibernate best practice 이다.
        <code>
            public class Member {
            	/*...*/
                @OneToMany(mappedBy = "member")
                private List<Order> orders = new ArrayList<>();
            }
        </code>
        => 객체의 초기화에 대한 고민을 하지 않아도 된다.
        => Hibernate 가 Entity 를 Persist 하는 순간 collection 을 감싸서 hibernate 용 내장 컬렉션으로 변경한다.
           이는 Hibernate가 collection의 변경사항을 추적하기 위함인데,
           이것을 setter 등을 이용하여 new ArrayList<>(); 를 통해 초기화를 시켜버릴 경우 Hibernate 가 원하는 메커니즘으로 동작하지 않을 수 있다.



* 출처 : - https://velog.io/@kangsan/%EC%A2%8B%EC%9D%80-Entity-%EB%A5%BC-%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EA%B0%9C%EB%85%90%EB%93%A4
        - https://velog.io/@conatuseus/JPA-%EC%9E%84%EB%B2%A0%EB%94%94%EB%93%9C-%ED%83%80%EC%9E%85embedded-type-8ak3ygq8wo