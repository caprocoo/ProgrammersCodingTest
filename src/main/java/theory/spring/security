1. Session Stateless vs Stateful
    : 클라이언트와 서버간의 네트워크 통신이 어떻게 이루어지는지에 대한 개념이다. 즉 네트워크 프로토콜이다.
    1) 세션 상태
        - 클라이언트와 서버간 통신 인증이 된 상태를 의미한다.
        - 인증된 상태에서 데이터 송수신이 가능하다.
    2) 세션 정보
        - 한 세션 내에서 클라이언트가 서버에 전송할 데이터 정보를 의미한다.
        - 서버는 세션 유지 시간이 지나거나, 클라이언트가 전송하려했던 데이터를 모두 수신할 때까지 클라이언트와의 세션 상태를 유지한다.

    3) Stateful
        : 세션이 종료될 때까지, 클라이언트의 세션 정보를 저장하는 네트워크 프로토콜이다.
        (1) 예제
            - TCP 프로토콜
            - 온라인 뱅킹
        (2) 장점
            - 서버는 클라이언트의 세션 정보를 저장하므로 갑자기 통신이 중단되더라도 중단된 곳부터 다시 시작할 수 있다.
        (3) 단점
            - 확장성이 좋지 않다.
                - 클라이언트의 세션 정보가 새로 scale out 된 서버에 저장되어 있지 않다.
                - scale out시, 클라이언트의 세션 정보를 새로운 서버에 옮겨주는 등의 부수적인 관리가 요구되므로, 확장성이 좋지 않다.

    4) Stateless
        - 서버가 클라이언트의 세션 상태 및 세션 정보를 저장하지 않는 네트워크 프로토콜이다.
        - 즉, 요청에 대한 응답만 처리하는 방식이다.
        - 각 통신은 선행되거나 후속으로 따라오는 통신과 관련이 없다.
        - 클라이언트가 송신하려 했던 모든 데이터가 서버쪽에 수신되었는지 확인하지 않는다.
        (1) 예제
            - UDP 프로토콜
            - 온라인 검색(검색창에 질문을 입력하고 엔터키를 누르는 형식)
        (2) 장점
            - 확장성이 좋다.
                : 서버가 클라이언트의 세션 상태 및 세션 정보를 저장하지 않기 때문에 확장성이 좋다.
        (3) 단점
            - 서버가 세션 상태 및 세션 정보를 저장하지 않기 때문에, 클라이언트 측에서 송신할 데이터의 양이 많아진다.

    -> Spring security에서 담당해야할 부분은 인증과 권한, 이 두 개념과 관련이 있는 Session Stateless를 활용할 예정이다.
    -> API 서버는 유저의 세션을 관리하는 것이 아닌 특정 토큰에 의해서 Request 헤더에 특정 토큰(Access Token)을 보내주면 인증이 완료되고 api 기능을 사용할 권한을 갖게 된다.

2. SpringSecurity.java

    <code>
        import org.springframework.context.annotation.Bean;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.http.HttpMethod;
        import org.springframework.security.config.annotation.web.builders.HttpSecurity;
        import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
        import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
        import org.springframework.security.config.http.SessionCreationPolicy;
        import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
        import org.springframework.security.crypto.password.PasswordEncoder;

        @Configuration
        @EnableWebSecurity
        public class SecurityConfig extends WebSecurityConfigurerAdapter {

            @Override
            protected void configure(HttpSecurity http) throws Exception {
                http
                        .cors().and()
                        .csrf().disable()
                        .sessionManagement()
                            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                            .and()
                        .authorizeRequests()
                            .antMatchers(HttpMethod.OPTIONS, "/**").permitAll()
                            .antMatchers("/api/v1/test/permit-all").permitAll()
                            .antMatchers("/api/v1/test/auth").authenticated()
                            .antMatchers("/**").authenticated()
                            .anyRequest().permitAll()
                            .and()
                        .formLogin().disable()
                ;
            }
        }
    </code>

    1) 기본 설정
        - @Configuration
            : 자바로 진행하는 설정 클래스에 붙이는 어노테이션으로 스프링 빈으로 만들고 스프링 프로젝트가 시작될 때 스프링 시큐리티 설정내용에 반영되도록 한다.
        - @EnableWebSecurity
            : 스프링 시큐리티를 활성화하는 어노테이션이다.
        - WebSecurityConfigureAdapter
            : 스프링 시큐리티 설정관련 클래스로 커스텀 설정 클래스가 이 클래스의 메소드를 오버라이딩해서 설정해야 스프링 시큐리티에 반영된다.
            ※ 2.7.x 버전 이상부터는 지원하지 않는다. WebSecurityConfigureAdapter를 상속받지 않고 각 기능을 Bean으로 생성한다.
    2) 기능
        (1) cors()
            : CorsFilter라는 필터가 존재하는데 이를 활성화 시키는 작업이다.

        (2) csrf() - Cross site Request forgery
            - 정상적인 사용자가 의도치 않은 위조 요청을 보내는 것을 의미한다.
            - 예를 들어 A라는 도메인에서 인증된 사용자 H가 위조된 request를 포함한 link, email을 사용하였을 경우(클릭, 사이트 방문 등)
              A 도메인에서는 이 사용자가 일반 유저인지, 악용된 공격인지 구분할 수 없다.
            - csrf는 spring security에서 default로 설정되며 GET요청을 제외한 POST, PUT, DELETE(상태를 변화시킬 수 있는 요청) 요청으로부터 보호한다.
            - csrf().disable()
                : 세션을 사용하지 않고 JWT 토큰을 활용하여 REST API를 만드는 작업이기 때문에 csrf는 disable 처리한다.
            (2-1) REST API에서의 csrf는 왜 disable 시키는가?
                - REST API를 이용한 서버는 session 기반 인증과는 다르게 stateless하기 때문에 서버에 인증정보를 보관하지 않는다.
                - REST API에서 client는 권한이 필요한 요청을 하기 위해서 요청에 피룡한 인증정보를 (OAuth2, JWT토큰 등)을 포함시켜야 한다.
                - 따라서 서버에 인증정보를 저장하지 않기 때문에 굳이 불필요한 csrf 코드들을 작성할 필요가 없다.

        (3) sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            - 스프링 시큐리티에서 세션을 관리하지 않겠다는 뜻이다.
            - 클라이언트에서 요청하는 헤더에 token을 담아보내고 확인하여 인증하는 방식을 사용할 것이기에 세션이 필요하지 않다.

        (4) authorizeRequests()
            - 이 안에서 인증절차에 대한 설정을 진행한다.

        (5) antMatchers()
            - 특정 URL에 대해 어떻게 인증처리를 할지 결정한다.

        (6) permitAll()
            - 스프링 시큐리티에서 인증이 되지 않더라도 통과시켜 누구에게나 사용을 열어준다.

        (7) authenticated()
            - 요청 내에 스프링 시큐리티 컨텍스트 내에서 인증이 완료되어야 api를 사용할 수 있다.
            - 인증이 되지 않은 요청은 403(Forbidden)이 내려진다.

        (8) anonymous()
            - 'antMatchers()' 뒤에 사용할 수 있는데 유저의 상태가 annonymous일 때만 호출이 가능하다.
            - 인증된 유저는 접근할 수 었는 요청이 되어버리니 주의가 필요하다.

3. UserDetails.java - 인증대상객체(로그인 객체)
    - 사용자의 정보를 불러와서 담는 인터페이스이다.

    1) 기본 오버라이드 메서드
        (1) getAuthorities()
            - return type : Collection< ? extends GrantedAuthority>
            - description : 계정의 권한 목록을 return

        (2) getPassword()
            - return type : String
            - description : 계정의 비밀번호를 리턴

        (3) getUsername() - email(로그인용 아이디)는 SSO 같은 서버를 만들게 되면 정책에 따라서 중복이 될 수도 있기에 PK 값을 넘기는 것이 낫다.
            - return type : String
            - description : 계정의 고유한 값을 리턴
                            (ex : DB PK 값, 중복이 없는 이메일 값)

        (4) isAccountNonExpired()
            - return type : boolean
            - description : 계정의 만료 여부 리턴
            - default value : true (만료 안됨)

        (5) isAccountNonLocked()
            - return type : boolean
            - description : 계정의 잠김 여부 리턴
            - default value : true (잠기지 않음)

        (6) isCredentialsNonExpired()
            - return type : boolean
            - description : 비밀번호 만료 여부 리턴
            - default value : true (만료 안됨)

        (7) isEnabled()
            - return type : boolean
            - description : 계정의 활성화 여부 리턴
            - default value : true (활성화 됨)

4. UserDetailsService.java - 인증로직서비스
    - loadUserByUsername 메서드에서 Request에서 받은 로그인 데이터를 활용하여 로그인 작업을 해준다.
    - 이 메서드에서 인증된 결과를 가지고 인증대상객체(UserDetails)를 리턴해준다.
    - 여기서 ID만으로 인증하는 형태로 보여지는데 비밀번호가 다르면?
        : loadUserByUsername을 호출하여 인증을 마치고 내부적으로 UserDetails 클래스와 Password를 passwordEncorder를 이요하여 처리할 수 있도록 하는 서비스 로직이 존재한다.
    1) 기본 오버라이드 메서드
        (1) loadUserByUsername()
            - return type : UserDetails
            - description : 유저의 정보를 불러와서 UserDetails로 return







- 출처 :
        https://sas-study.tistory.com/356                           // Spring boot Security
        https://wooono.tistory.com/366                              // Stateless & Stateful
        https://velog.io/@woohobi/Spring-security-csrf%EB%9E%80     // csrf()
        https://programmer93.tistory.com/68                         // UserDetails & UserDetailsService