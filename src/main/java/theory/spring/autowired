1. Autowired란?
    : 필요한 의존 객체의 '타입'에 해당하는 빈을 찾아 주입한다.
    : 아래 3가지 경우에 Autowired를 사용할 수 있다.
        - constructor
        - setter
        - field

2. Constructor Dependency Injection
    : 생성자에 의존성 주입을 받고자 하는 field를 나열하는 방법이다.

    1) 장점
        - 필수적으로 사용해야 하는 레퍼런스 없이는 인스턴스를 만들지 못하도록 강제한다.
        - Spring 4.3 이상부터는 생성자가 하나인 경우 @Autowired를 사용하지 않아도 된다.
        - 생성자에 점차 많은 의존성이 추가될 경우 리팩토링 시점을 감지할 수 있다.
        - 의존성 주입 대상 필드를 final로 선언할 수 있다.
        - 테스트 코드 작성시 생성자를 통해 의존성 주입이 용이하다.

    2) 단점
        - 어쩔 수 없는 순환 참조는 생성자 주입으로 해결하기 어렵다.

3. Setter Dependency Injection
    : setter method에 @Autowired annotation을 선언하여 주입받는 방법이다.
      (method이름을 setter 대신에 다른 걸로 해도 주입이 가능하지만 좋은 방법은 아니다.)
    1) 장점
        - 의존성이 선택적으로 필요한 경우에 사용한다.
        - 생성자에 모든 의존성을 기술하면 과도하게 복잡해질 수 있는 것을 선택적으로 나누어 주입할 수 있게 부담을 덜어준다.
        - 생성자 주입 방법과 Setter 주입 방법을 적절하게 분배하여 사용한다.

    2) 단점
        - final 선언이 불가하다.

4. Field Dependency Injection
    : field에 @Autowired annotation을 선언하여 주입받는 방법이다.

    1) 장점
        - 가장 간단한 선언방식이다.
    2) 단점
        - 의존 관계가 한눈에 들어오지 않아 추상적이고 의존성 관계가 과도하게 복잡해질 수 있다.
        - DI Container와 강한 결합을 가져 외부 사용이 용이하지 않다.
        - final 선언이 불가하다.

5. 의존성 주입 예시
    1) 해당 타입의 빈이 없는 경우

    <code>
        // Constructor Dependency Injection
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.stereotype.Service;

        @Service
        public class BookService {

            BookRepository bookRepository;

            @Autowired
            public BookService(BookRepository bookRepository) {
                this.bookRepository = bookRepository;
            }
        }
    </code>
    => BookRepository가 빈으로 등록되어 있지 않다고 가정하면 생성자에서 에러가 발생한다.
       왜냐하면 Autowired가 의존성을 주입하기 위해서는 빈이 등록되어 있는 객체 중에서 찾기 때문이다.
       (Autowired의 기본값은 true)

    <code>
        // Setter Dependency Injection
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.stereotype.Service;

        @Service
        public class BookService {

            BookRepository bookRepository;

            @Autowired
            public void setBookRepository(BookRepository bookRepository) {
                this.bookRepository = bookRepository;
            }
        }
    </code>
    => BookRepository가 빈으로 등록되어 있지 않다고 가정하면 Autowired가 붙은 setter에서 에러가 발생한다.
       하지만 BookService의 빈과 setter의 빈은 다르기 때문에 각각 등록할 수 있다.
       setter의 Autowired를 false로 바꾸면 애러를 잡을 수 있을까?

    <code>
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.stereotype.Service;

        @Service
        public class BookService {

            BookRepository bookRepository;

            @Autowired(required = false)
            public void setBookRepository(BookRepository bookRepository) {
                this.bookRepository = bookRepository;
            }
        }
    </code>
    => 위와 같이 Autowired 값을 false로 놓게 되면 BookService의 객체는 빈으로 등록이 되지만,
       BookRepository는 빈으로 등록되지 않는다.

    <code>
        // Field Dependency Injection
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.stereotype.Service;

        @Service
        public class BookService {

            @Autowired(required = false)
            BookRepository bookRepository;
        }
    </code>
    => Setter Dependency Injection 설명과 같은 맥락이다.

    2) 해당 타입의 빈이 여러 개인 경우
    : 만약 BookRepository라는 interface 아래에 MyBookRepository, YourBookRepository라는 class가 존재하고
      둘 다 Bean으로 등록되어 있을 때, BookRepository에 Autowired를 적용하면 주입을 할 수 없게 된다.
      이유는 등록해야 할 빈이 2개이기 때문에 Spring은 어떤걸 빈으로 등록해야할지 모르기 때문이다.

    <code>
        //@Primary 사용
        @Repository @Primary
        public class MyBookRepository implements BookRepository {
               // test
        }
    </code>
    => MyBookRepository를 빈으로 등록하고 싶을 때는 @Primary 어노테이션을 추가한다.

    <code>
        //@Qualifier

        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.beans.factory.annotation.Qualifier;
        import org.springframework.stereotype.Service;

        @Service
        public class BookService {

            @Autowired @Qualifier("myBookRepository")
            BookRepository bookRepository;
        }
    </code>
    => @Qualifier 라는 어노테이션 괄호 안에 등록하고자 하는 빈의 이름을 적어주면 된다.
       하지만 @Qualifier보다 @Primary가 더 안전한 방법이다.

    <code>
        //해당 타입의 빈을 모두 주입
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.stereotype.Service;
        import java.util.List;

        @Service
        public class BookService {

            @Autowired
            List<BookRepository> bookRepositoryList;
        }
    </code>
    => List를 이용하면 BookRepository에 해당하는 모든 타입의 빈을 주입받을 수 있다.

* 출처 : - https://devlog-wjdrbs96.tistory.com/166