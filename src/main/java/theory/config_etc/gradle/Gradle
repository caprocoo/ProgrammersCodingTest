1. Gradle의 특징
    - 의존성 관리를 위한 다양한 방법을 제공하고 빌드 스크립트를 XML 언어가 아닌 JVM에서 동작하는 스크립트 언어인
      Groovy 기반의 DSL(Domain Specific Language)를 사용한다.
    - 그루비는 자바 문법과 유사하여 자바 개발자가 쉽게 익힐 수 있다는 장점이 있다.
    - Gradle Wrapper를 이용하면 Gradle이 설치되지 않은 시스템에서도 프로젝트를 빌드할 수 있다.
    - Maven의 중앙 저장소도 지원하기 때문에 라이브러리를 모두 그대로 가져다 사용할 수 있다.
    - Gradle은 Maven과 달리 멀티 프로젝트를 지원한다.

2. build.gradle
    - 빌드 스크립트라고 하며 엄밀히 말하면 빌드 구성 스크립트라고 한다.

3. 강점
    1) 직관적인 코드와 자동완성
        - Maven의 경우 xml로 이루어져있기 때문에 알아보기가 힘들고 문서를 찾기도 힘들다.
        - Gradle은 markup Language가 아닌 Groovy나 Kotlin으로 짤 수 있어서 가독성이 뛰어나다.

    2) 다양한 Repository 사용 가능
        - Maven Repository, JCenter 외 커스텀 파일 저장 공간 등 다양한 저장 공간을 사용하기 위해 단순히 Repository에 대한 정의만 해주면 된다.
        - plugin용 Repository와 dependency용 Repository를 분리하여 관리할 수 있다.

    3) 각 작업에 필요한 라이브러리들만을 가져오는 작업
        - build.gradle 을 확인해보면 여러 라이브러리에 대한 implementation이 있는 것을 확인할 수 있는데,
          implementation은 라이브러리를 가져오는 것을 뜻한다.
        - 원하는 Scope 별로 다른 라이브러리를 손쉽게 가져올 수 있다.

4. 빌드 속도가 빠른 이유
    1) 점진적 빌드
        - 이미 빌드된 파일들을 모두 다시 빌드하는 것이 아닌 바뀐 파일들만 빌드하는 것을 뜻한다.

    2) Build Cache
        - 만약 두 개 이상의 빌드가 돌아가고, 하나의 빌드에서 사용되는 파일들이 다른 빌드들에 사용된다면 Build Cache를 통해 이전 빌드의 결과물을 다른 빌드에서 사용할 수 있다.
        - 이로 인해 다시 빌드하지 않다도 되므로 빌드 시간이 줄어들게 된다.

    3) Daemon Process
        - 데몬 프로세스는 서비스의 요청에 응답하기 위해 오랫동안 살아있는 프로세스인데 메모리 상에 빌드 결과물을 보관한다.
        - 이로 인해 한 번 빌드된 프로젝트는 다음 빌드에서 매우 적은 시간만 소요된다.
        - 실제로 안드로이드의 경우 프로젝트가 복잡해지면 처음 빌드하는데 긴 시간이 소요되지만, 다음 빌드부터는 매우 적은 시간이 소모된다.


- 출처 : - https://madplay.github.io/post/what-is-gradle
        - https://kotlinworld.com/311
