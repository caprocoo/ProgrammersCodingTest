1. Vue 라이프사이클이란?
    : 어떤 Vue 인스턴스나 컴포넌트가 생성될 때, 미리 사전에 정의된 몇 단계의 과정을 거치게 되는데, 이를 라이프사이클이라 한다.
    - Vue 인스턴스는 크게 생성(create)되고, DOM에 부착(mount)되고, 업데이트(update)되며, 없어지는(destroy) 4가지 과정을 거친다.
    - Vue를 사용하는 사람들을 위해 훅(Hook)을 하는 API를 제공한다
        1) beforeCreate
        2) created
        3) beforeMount
        4) mounted
        5) beforeUpdate
        6) updated
        7) beforeDestroy
        8) destroyed

2. beforeCreate
    - Vue 인스턴스가 초기화 된 직후에 발생된다.
    - 컴포넌트가 DOM에 추가되기도 전이어서 'this.$el' 에 접근할 수 없다.
    - 또한 data, event, watcher에도 접근하기 전이라 data, methods에도 접근할 수 없다.
    <code>
        var app = new Vue({
            el: '#app',
            data() {
                return {
                    msg: 'hello';
                }
            },
            beforeCreate(function() {
                console.log(this.msg); // undefined
            })
        })
    </code>

3. created
    - data를 반응형으로 추적할 수 있게 되며, computed, methods, watch 등이 활성화되어 접근이 가능하다.
    - 아직 DOM에 추가되지 않은 상태이다.
    - data에 직접 접근이 가능하기 때문에 컴포넌트 초기에 외부에서 받아온 값들로 data를 세팅해야 하거나
      이벤트 리스너를 선언해야 한다면 이 단계에서 하는 것이 가장 적절하다.

    <code>
        var app = new Vue({
            el: '#app',
            data() {
                return {
                    msg: 'hello';
                }
            },
            created(function() {
                console.log(this.msg); // hello
            })
        })
    </code>

4. beforeMount
    - DOM에 부착하기 직전에 호출되며 템플릿이 있는지 없는지 확인한 후 템플릿을 렌더링 한 상태이므로,
      가상 DOM이 생성되어 있으나 실제 DOM에 부착되지는 않은 상태이다.

    <code>
        var app = new Vue({
            el: '#app',
            beforeMount(function() {
                console.log('beforeMount');
            })
        })
    </code>

5. mounted
    - 일반적으로 가장 많이 사용하는 훅이며, 가상 DOM의 내용이 실제 DOM에 부착되고 난 이후에 실행되므로,
      'this.$el' 을 비롯한 data, computed, methods, watch 등 모든 요소에 접근이 가능하다.
    - 부모와 자식 컴포넌트 mounted 순서는 자식 컴포넌트의 mounted 훅이 실행된 후 부모 컴포넌트의 mounted 훅이 실행된다.
    <code>
        var app = new Vue({
            el: '#app',
            mounted(function() {
                console.log('mounted');
            })
        })
    </code>

    - 자식 컴포넌트가 서버에서 비동기로 데이터를 받아오는 경우처럼, 부모의 mounted훅이 모든 자식 컴포넌트가 mount된 상태를 보장하지 않는다.
    - 따라서 이때는 'this.$nextTick' 이용한다면 모든 화면이 렌더링 된 이후에 실행되므로 마운트 상태를 보장할 수 있다.
    <code>
        var app = new Vue({
            el: '#app',
            mounted(function() {
                this.$nextTick(function() {
                    // 모든 화면이 렌더링된 후 실행합니다.
                })
            })
        })
    </code>

6. beforeUpdate
    - 컴포넌트에서 사용되는 data의 값이 변해서, DOM에도 그 변화를 적용시켜야 할 때가 있다.
    - 변화 직전에 호출되는 것이 beforeUpdate 훅이다.
    <code>
        var app = new Vue({
            el: '#app',
            beforeUpdate(function() {
                console.log('beforeUpdate');
            })
        })
    </code>

7. updated
    - 가상 DOM을 렌더링하고 실제 DOM이 변경된 이후에 호출되는 updated 훅이다.
    - 변경된 data가 DOM에 적용된 상태이며 변경된 값들을 DOM을 이용해 접근하고 싶을 때 사용한다.
    - 다만 이 훅에서 data를 변경하는 것은 무한 루프를 일으킬 수 있으므로 이 훅에서는 데이터를 직접 바꾸어서는 안된다.
    - mounted 훅과 마찬가지로, 'this.$nextTick'을 이용해, 모든 화면이 업데이트된 이후의 상태를 보장할 수 있다.
    <code>
        var app = new Vue({
            el: '#app',
            updated(function() {
                console.log('updated');
            })
        })
    </code>
8. beforeDestroy
    - 해당 인스턴스가 해체되기 직전에 beforeDestroy 훅이 호출된다.
    - 아직 해체되기 이전이므로, 모든 속성에 접근이 가능하다.
    - 이 단계에서는 이벤트 리스너를 해제하는 등 인스턴스가 사라지기 전에 해야할 일들을 처리하면 된다.

    <code>
        var app = new Vue({
            el: '#app',
            beforeDestroy(function() {
                console.log('beforeDestroy');
            })
        })
    </code>

9. destroyed
    - 인스턴스가 해제되고 난 직후에 destroyed 훅이 호출된다.
    - 해체가 끝난 이후이기 때문에, 인스턴스 속성에 접근할 수 없다.
    - 하위 Vue 인스턴스 역시 삭제된다.
    <code>
        var app = new Vue({
            el: '#app',
            destroyed(function() {
                console.log('destroyed');
            })
        })
    </code>
* 출처 : https://wormwlrm.github.io/2018/12/29/Understanding-Vue-Lifecycle-hooks.html
