1. computed 란?
    : 반응형 getter이다.

    <code>
        <template>
          <div>
            <p>원본 메시지: "{{ message }}"</p>
            <p>역순으로 표시한 메시지: "{{ reversedMessage }}"</p>
          </div>
        </template>

        <script>
        export default {
          name: 'test',
          data(){
            return {
              message: '안녕하세요'
            }
          },
          computed: {
            reversedMessage: function () {
              return this.message.split('').reverse().join('')
            }
          }
        }
        </script>
    </code>
    - 위의 예시에서 computed 프로퍼티를 보면, reverseMessage라는 프로퍼티에 값으로 익명함수가 할당되어 있다.
    - computed에 정의하는 이 익명함수는 반드시 값을 리턴하도록 작성되어야 한다.

    1) getter
        - computed의 reverseMessage 프로퍼티가 정의될 때, 내부적으로는 Object.defineProperty를 통해 정의되며 이때 익명함수가 getter로 설정된다..
        - reverseMessage를 함수가 아니라 일반 객체처럼 사용할 수 있는 점과 호출될 때만 계산이 이루어지고, 계산결과가 캐싱되는 특성이 생기게 된 것은 getter의 특성 덕분이다.
          (이는 methods와의 차이를 유발하는 지점이기도 하다.)
        - 하지만 바로 이점 때문에 값이 변하게 되어도 캐싱떄문에 변경된 값을 인지하지 못하는 단점이 생긴다.

    2) 반응형
        - Vue.js는 이 단점을 상쇄하고 반응형을 구현하기 위해 특별한 장치를 하는데
          바로 getter 함수 내에 속한 프로퍼티의 변경여부를 추적하는 것이다.
        - 위 예시에서는 message를 감시하고 있다가 message의 값이 변경되면 reversMessage를 다시 계산한다.
        - 결국 computed는 사용하기 편하고 자동으로 값을 변경하고 캐싱해주는 '반응형 getter'라 부를 수 있다.

2. watch 란?
    : 반응형 콜백이다.
    - 변경을 감시(watch)한다는 점 때문에 computed와 watch를 혼동할 수 있다.
    - watch는 Vue 인스턴스의 특정 프로퍼티가 변경될 때 지정한 콜백함수가 실행되는 기능이다.
    <code>
        <template>
          <div>
            <p>원본 메시지: "{{ message }}"</p>
            <p>역순으로 표시한 메시지: "{{ reversedMessage }}"</p>
          </div>
        </template>

        <script>
        export default {
          name: 'test',
          data(){
            return {
              message: '안녕하세요',
              reversedMessage: ''
            }
          },
          watch: {
            message: function (newVal, oldVal) {
              this.reversedMessage = newVal.split('').reverse().join('')
            }
          }
        }
        </script>
    </code>
    - message 프로퍼티에 익명함수가 할당되어 있는데 콜백함수의 역할을 할 것이고,
      message 프로퍼티가 변경되면 변경된 값을 콜백함수의 첫 번째 인자로 전달하고, 이전 값을 두 번째 인자로 전달하여 실행한다.
    - computed가 새 프로퍼티를 생성하고 그것의 getter로 익명함수를 설정하는 것과는 달리
      watch는 아무 프로퍼티도 생성하지 않고 익명함수는 단순히 콜백함수로의 역할을 한다.
    - watch에 명시된 프로퍼티는 감시할 대상을 의미할 뿐이다.

3. How Use?
    - 인스턴스의 data에 할당된 값들 사이의 종속관계를 자동으로 세팅하고자 할 때는 computed로 구현하는 것이 좋다.
    - watch는 특정 프로퍼티의 변경시점에 특정 액션(call api, push route ...)을 취하고자 할 때 적합하다.
    - computed의 경우 종속관계가 복잡할 수록 재계산 시점을 예상하기 힘들기 때문에 종속관계의 값으로 계산된 결과를 리턴하는 것 외의 사이드 이펙트가 일어나는 코드를 지양해야 한다.
    - 만약 computed로 구현가능한 것이라면 watch가 아닌 computed로 구현하는 것이 보통 옳다.

* 출처 : https://blog.jeongwoo.in/vue-js-watch%EC%99%80-computed-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%99%80-%EC%82%AC%EC%9A%A9%EB%B2%95-e2edce37ec34
