1. Rebase 란
    - 두 개의 공통 Base를 가진 Branch에서 한 Branch의 Base를 다른 Branch의 최신 커밋으로 branch의 base를 옮기는 작업이다.

2. 장점
    1) 공유 branch의 최신 변경사항을 즉각 반영할 수 있다.
        - git merge는 공유 branch에 대한 변경사항을 즉각 대응하기 어려운데,
          Git rebase를 사용한다면, 동료 개발자들이 올린 commit들의 수정사항을 내가 작업하고 있는 branch에 즉각 반영할 수 있다.
        - 즉, 공유 branch에 대한 최신 commit을 반영하면서 작업을 해야할 때 git rebase를 사용한다면 작업 branch에서 항상 최신 변경사항을 적용한 commit을 유지할 수 있다.
    2) rebase는 커밋이력을 남기지 않으므로 commit History가 깔끔해진다.
        - git merge를 사용하여 최신 이력을 가져올 경우, 복잡하고 어지러운 커밋 History가 된다.
        - 하지만 git rebase로 만들어진 History는 두, 세 줄의 깔끔하고 직관적인 History로 프로젝트를 관리 할 수 있다.
        - 특히, git-flow를 사용할 때 Rebase and Merge 전략으로 깔끔한 History로 작업할 수 있다.
        - git-flow에서는 develop 브랜치를 생성하고 개발자들이 각각 기능별로 feature를 생성하고 개발이 완료되면 develop에 merge를 한다.

3. 단점
    - 내 작업 branch의 각각 commit마다 conflict를 해결해야 한다.
        - merge는 충돌이 발생하면 한번만 처리하면 되지만 rebase는 나의 branch의 각각의 commit마다 충돌처리를 해주어야 한다.
        - 즉, 오래전에 수정했던 커밋을 rebase 과정에서 또 다시 conflict를 해결해줘야 할 수도 있다.
        - 그래서, 각각의 커밋마다 충돌을 해결하고 Resolve Confilct와 Continue rebase를 해주어야 하는 번거로움이 있을 수 있다.
    => 오히려 각각의 커밋마다 충돌을 해결하는 것이 코드 에러를 줄이고 품질을 높일 수 있다.

* 출처 : - https://seosh817.tistory.com/240