Binary Search Tree (이진 탐색 트리)

0. 이진탐색이란? (정렬된 배열 또는 리스트에 적합한 고속 탐색 방법)
    - 배열의 중앙에 있는 값을 조사하여 찾고자 하는 항목이 왼쪽 또는 오른쪽 부분 배열에 있는지를 알아내어 탐색의 범위를 반으로 줄인다.
    - 찾고자 하는 값이 속해있지 않은 부분은 전혀 고려할 필요가 없기 때문에, 매 단계에서 검색해야 할 리스트의 크기를 반으로 줄일 수 있다.
    - 이러한 방법을 반복적으로 사용해 탐색하는 방법이 이진 탐색이다.
    - 데이터의 삽입이나 삭제가 빈번할 시에는 적합하지 않고, 주로 고정된 데이터에 대한 탐색에 적합하다.

    - 순환호출
        <code>
            int binarySearch1(int key, int low, int high) {
                int mid;

                if(low <= high) {
                    mid = (low + high) / 2;

                    if(key == arr[mid]) { // 탐색 성공
                        return mid;
                    } else if(key < arr[mid]) {
                        // 왼쪽 부분 arr[0]부터 arr[mid-1]에서의 탐색
                        return binarySearch1(key ,low, mid-1);
                    } else {
                        // 오른쪽 부분 - arr[mid+1]부터 arr[high]에서의 탐색
                        return binarySearch1(key, mid+1, high);
                    }
                }

                return -1; // 탐색 실패
            }
        </code>
    - 반복을 이용한 이진 탐색 구현 : 반복 구조를 사용하는 것이 재귀 호출로 구현하는 것보다 효율적이다.
        <code>
            int binarySearch2(int key, int low, int high) {
            	int mid;

            	while(low <= high) {
            		mid = (low + high) / 2;

            		if(key == arr[mid]) {
            			return mid;
            		} else if(key < arr[mid]) {
            			high = mid - 1;
            		} else {
            			low = mid + 1;
            		}
            	}

            	return -1; // 탐색 실패
            }
        </code>

1. 이진 탐색 트리 성질
    - 모든 원소의 키는 유일한 키를 가진다.
    - 왼쪽 서브 트리 키들은 루트 키보다 작다.
    - 오른쪽 서브 트리 키들은 루트 키보다 크다.
    - 왼쪽과 오른쪽 서브 트리도 이진 탐색 트리이다.

    => 찾고자 하는 키 값이 이진트리의 루트 노드의 킷값과 비교해
       루트 노드보다 작으면 원하는 키값은 왼쪽 서브 트리에 있고,
       루트 노드보다 크면 원하는 키 값은 오른쪽 서브 트리에 있다.

2. 순환적인 탐색 연산
    : 이진 탐색 트리에서 특정한 키값을 가진 노드를 찾기 위해서는 먼저 주어진 탐색키 값과 루트 노드의 키값을 비교한다.
      비교한 결과에 따라 3가지로 나누어진다.

      1) 비교한 결과가 같으면 탐색이 성공적으로 끝난다.
      2) 비교한 결과가, 주어진 키 값이 루트 노드의 키값보다 작으면, 탐색은 이 루트 노드의 왼쪽 자식을 기준으로 다시 시작한다.
      3) 비교한 결과가, 주어진 키 값이 루트 노드의 키값보다 크면, 탐색은 이 루트 노드의 오른쪽 자식을 기준으로 다시 시작한다.

   <code>
    </code>

3. 이진 탐색 트리에서의 삽입 연산
   <code>
   // 노드 삽입
   public Node insertNode(Node node, int key) {
   	if(node == null) {
   		return new Node(key); // 노드가 빈 경우, 새로운 노드 삽입후 반환
   	}

   	// 그렇지 않으면 순환적으로 트리를 내려감
   	if(key < node.data) {
   		node.left = insertNode(node.left, key);
   	} else if(key > node.data) {
   		node.right = insertNode(node.right, key);
   	}

   	// 삽입 완료 후, 루트 노드 반환하며 끝
   	return node;
   }
    </code>

4. 이진 탐색 트리에서의 삭제 연산
    : 탐색 후에 3가지 경우를 고려해야 한다.
    1) 삭제하려는 노드가 단말 노드일 경우
        - 단말 노드 아래에는 더 이상의 노드가 없으므로 단말 노드만 지우면 된다.
        - 단말 노드의 부모 노드를 찾아서 부모 노드의 링크 필드를 null로 만들어 연결을 끊는다.
    2) 삭제하려는 노드가 하나의 서브 트리만(왼쪽 or 오른쪽) 가지고 있는 경우
        - 자기 노드는 삭제하고, 서브 트리는 자기 노드의 부모 노드에 붙여주면 된다.
    3) 삭제하려는 노드가 두 개의 서브 트리를 가지고 있는 경우
        - 삭제되는 노드와 가장 값이 비슷한 노드를 후계자로 선택해야 이진 탐색 트리가 그대로 유지된다.
        - 가장 값이 가까운 노드? => 왼쪽 서브 트리에서 가장 큰 값이나 오른쪽 서브트리에서 가장 작은 값
        - 삭제되는 노드의 오른쪽 서브 트리에서 가장 작은 값을 갖는 노드는 오른쪽 서브트리에서 왼쪽 자식 노드를 타고
          null을 만날 때까지 계속 타고 내려가면 찾을 수 있다.


* 출처 :
 - https://minhamina.tistory.com/97
 - https://minhamina.tistory.com/127
