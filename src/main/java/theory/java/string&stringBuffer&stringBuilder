1. String vs StringBuffer/StringBuilder
    : 가장 큰 차이점으로는 String은 불변(immutable)의 속성을 갖는다는 점이다.

2. String
    - 한번 생성되면 할당된 메모리 공간이 변하지 않는다.
    - 새로운 String 객체를 만든 후 , 새 String 객체에 연결된 문자열을 저장하고 그 객체를 참조하도록 한다.
        (Heap 메모리 영역(가비지 컬렉션이 동작하는 영역)에 생성.)
        (한번 생성된 객체의 내부 내용을 변화시킬 수 X)
    - 문자열 연산이 많은 경우 성능이 좋지 않다.
    - 동기화에 대해 신경쓰지 않다도 되기 때문에(Thread-safe), 내부 데이터를 자유롭게 공유 가능하다.

3. StringBuffer & StringBuilder

    - 공통점
        (1) 문자열 연산 등으로 기존 객체의 공간이 부족하게 되는 경우, 기존의 버퍼 크기를 늘리며 유연하게 동작한다.
        (2) 제공하는 메서드는 서로 동일하다.

    - 차이점 : 동기화 여부
        (1) StringBuffer는 각 메서드별로 Synchronized Keyword가 존재하여, 멀티스레드 환경에서도 동기화를 지원.
        (2) StringBuilder는 동기화를 보장하지 않음.

        => 그렇기때문에 멀티스레드 환경이라면 값 동기화 보장을 위해 StringBuffer를 사용하고,
           단일스레드 환경이라면 StringBuilder를 사용하는 것이 좋다.
           단일 스레드환경에서 StringBuffer를 사용한다고 문제가 되는 것은 아니지만,
           동기화 관련 처리로 인해 StringBuilder에 비해 성능이 좋지 않습니다.

4. 언제 어떻게 누구를 사용??

    - String은 짧은 문자열을 더할 경우 사용한다.
    - StringBuffer는 스레드에 안전한 프로그램이 필요할 때나, 개발 중인 시스템의 부분이 스레드에 안전한지 모를 경우 사용하면 좋다.
    - StringBuilder는 스레드에 안전한지 여부가 전혀 관계 없는 프로그램을 개발할 때 사용하면 좋다.


* 출처 : - https://12bme.tistory.com/42

