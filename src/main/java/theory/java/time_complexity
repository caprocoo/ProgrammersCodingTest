Time Complexity (시간복잡도) - Big-O 표기법

1. 시간복잡도를 고려한다는 것은
   '입력값의 변화에 따라 연산을 실행할 때, 연산 횟수에 비해 시간이 얼마만큼 걸리는가?'라는 말이다.
   - 입력값이 커짐에 따라 증가하는 시간의 비율을 최소화한 알고리즘을 구성 : 효율적인 알고리즘
   - 시간 복잡도는 Big-O 표기법을 사용해 나타낸다.

2. Big-O 표기법
   : '입력값의 변화에 따라 연산을 실행할 때, 연산 횟수에 비해 시간이 얼마만큼 걸리는가?'를 표기하는 방법.

   1) O(1)
    : 일정한 복잡도(constant complexity)라고 하며, 입력값이 증가하더라도 시간이 늘어나지 않는다.
        (입력값의 크기와 관계없이, 즉시 출력값을 얻어낼 수 있다는 의미)

    * O(1)의 시간 복잡도를 가진 알고리즘
    <code>

        function O_1_algorithm(arr, index) {
          return arr[index];
        }

        let arr = [1, 2, 3, 4, 5];
        let index = 1;
        let result = O_1_algorithm(arr, index);
        console.log(result); // 2

    </code>

   2) O(n)
    : 선형 복잡도(linear complexity)라고 부르며, 입력값이 증가함에 따라 시간 또한 같은 비율로 증가한다.
    ex) 입력 값 : 1, 1초의 시간 소요 / 입력 값 : 100, 100초의 시간 소요

    * O(n)의 시간 복잡도를 가진 알고리즘
        <code>

            function O_n_algorithm(n) {
              for (let i = 0; i < n; i++) {
                // do something for 1 second
              }
            }
            function another_O_n_algorithm(n) {
              for (let i = 0; i < 2n; i++) {
                // do something for 1 second
              }
            }

        </code>
    - 이 알고리즘 또한 Big-O 표기법으로는 O(n)으로 표기한다.
    - 왜냐하면 입력값이 커지면 커질수록 계수(n 앞에 있는 수)의 의미(영향력)가 점점 퇴색되기 때문에,
        같은 비율로 증가하고 있다면 2배가 아닌 5배, 10배로 증가하더라도 O(n)으로 표기한다.

   3) O(log n) - 이진탐색기법
    : 로그 복잡도(logarithmic complexity)라고 부르며, Big-O 표기법 중 O(1) 다음으로 빠른 시간 복잡도를 가진다.

    - BST(Binary Search Tree - 이진 탐색 트리)와 비슷하다.
    - 이해하기 쉬운 게임으로 비유해 보자면 up & down을 예로 들 수 있다.
         (1) 1~100 중 하나의 숫자를 플레이어1이 고른다. (30을 골랐다고 가정한다.)
         (2) 50(가운데) 숫자를 제시하면 50보다 작으므로 down을 외친다.
         (3) 1~50중의 하나의 숫자이므로 또다시 경우의 수를 절반으로 줄이기 위해 25를 제시한다.
         (4) 25보다 크므로 up을 외친다.
         (5) 경우의 수를 계속 절반으로 줄여나가며 정답을 찾는다.
    - 매번 숫자를 제시할 때마다 경우의 수가 절반이 줄어들기 때문에 최악의 경우에도 7번이면 원하는 숫자를 찾아낼 수 있게 된다.
    - BST의 값 탐색 또한 이와같은 로직으로, O(log n)의 시간 복잡도를 가진 알고리즘(탐색기법)이다.

   4) O(n2)
    : 2차 복잡도(quadratic complexity)라고 부르며, 입력값이 증가함에 따라 시간이 n의 제곱수의 비율로 증가하는 것을 의미한다.
    ex) 입력 값 : 1, 소요시간 : 1초 / 입력 값 : 5, 소요 시간 : 25초

    * O(n2)의 시간 복잡도를 가진 알고리즘
        <code>

            function O_quadratic_algorithm(n) {
              for (let i = 0; i < n; i++) {
                for (let j = 0; j < n; j++) {
                  // do something for 1 second
                }
              }
            }
            function another_O_quadratic_algorithm(n) {
              for (let i = 0; i < n; i++) {
                for (let j = 0; j < n; j++) {
                  for (let k = 0; k < n; k++) {
                    // do something for 1 second
                  }
                }
              }
            }

        </code>
    - 2n, 5n 을 모두 O(n)이라고 표현하는 것처럼, n3과 n5 도 모두 O(n2)로 표기한다.
    - n이 커지면 커질수록 지수가 주는 영향력이 점점 퇴색되기 때문에 이렇게 표기한다.

   5) O(2n) - 피보나치 수열
    : 기하급수적 복잡도(exponential complexity)라고 부르며, Big-O 표기법 중 가장 느린 시간 복잡도를 가진다.
    - 종이를 42번 접으면 그 두께가 지구에서 달까지의 거리보다 커진다는 이야기를 들어보신 적 있으신가?
    - 고작 42번 만에 얇은 종이가 그만한 두께를 가질 수 있는 것은, 매번 접힐 때마다 두께가 2배 로 늘어나기 때문이다.
    - 구현한 알고리즘의 시간 복잡도가 O(2n)이라면 다른 접근 방식을 고민해 보는 것이 좋다.

    * O(n2)의 시간 복잡도를 가진 알고리즘
        <code>

            function fibonacci(n) {
              if (n <= 1) {
                return 1;
              }
              return fibonacci(n - 1) + fibonacci(n - 2);
            }

        </code>

    - 재귀로 구현하는 피보나치 수열은 O(2n)의 시간 복잡도를 가진 대표적인 알고리즘이다.
    - 브라우저 개발자 창에서 n을 40으로 두어도 수초가 걸리는 것을 확인할 수 있으며,
      n이 100 이상이면 평생 결과를 반환받지 못할 수도 있다.


*출처 : https://hanamon.kr/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-time-complexity-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84/
