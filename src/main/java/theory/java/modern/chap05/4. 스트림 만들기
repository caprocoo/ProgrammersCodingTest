* 모던 자바 인 액션 chap05 - 스트림 만들기 p.188

4. 스트림 만들기
    - 일련의 값, 배열, 파일, 심지어 함수를 이용한 무한 스트림 만들기 등 다양한 방식으로 스트림을 만드는 방법을 설명한다.

    4-1 값으로 스트림 만들기
        - Stream.of()를 이용해서 스트림을 만들 수 있다.
        <code>
            Stream<String> stream = Stream.of("Modern", "java", "in", "action");
            stream.map(String::toUpperCase).forEach(System.out::println);
        </code>
        => 스트림의 모든 문자열을 대문자로 변환한 후 문자열을 하나씩 출력한다.

    4-2 null이 될 수 있는 객체로 스트림 만들기
        - 자바 9에서는 null이 될 수 있는 개체를 스트림으로 만들 수 있는 메서드가 추가되었다.
        - Stream.ofNullable() 메서드를 통해 만들 수 있다.
        - System.getProperty는 제공된 키에 대응하는 속성이 없으면 null을 반환한다.
        <code>
            Stream<String> valueCheck = Stream.of("thanks", "happy", "good").flatMap(k -> Stream.ofNullable(System.getProperty(k)));
        </code>

    4-3 배열로 스트림 만들기
        <code>
            int[] numbers = {1, 2, 3, 4, 5};
            int sum = Arrays.stream(numbers).sum();
            System.out.println(sum);
        </code>
        => int 배열 -> IntStream

    4-4 함수로 무한 스트림 만들기
        - 함수에서 스트림을 만들 수 있는 두 정적 메서드 iterate와 generate를 제공한다.
        - 두 연산을 이용해서 무한 스트림, 즉 크기가 고정되지 않은 스트림을 만들 수 있다.
        - 요청할 때마다 주어진 함수를 이용해서 값을 만들고 무제한으로 값을 계산할 수 있다.
        - 하지만 보통 무한한 값을 출력하지 않도록 limit(n) 함수와 함께 연결해서 사용한다.

        1) iterate 메서드
            - iterate는 요청할 때마다 값을 생산할 수 있으며 끝이 없으므로 무한스트림을 만든다.
              이러한 스트림을 언바운드 스트림이라고 표현한다.
            - 일반적으로 연속된 일련의 값을 만들 때는 iterate를 사용한다. ex) 피보나치수열 집합
            <code>
                Stream.iterate(0, n -> n + 2).limit(10).forEach(System.out::println);
            </code>
            => 초기 값(예제에서는 0)과 람드를 인수로 받아 새로운 값을 끊임없이 생산할 수 있다.

            - 또한 자바 9의 iterate 메서드는 Predicate를 지원한다.
              예를 들어 0에서 시작하여 100보다 크면 숫자 생성을 중단하는 코드를 다음처럼 구현할 수 있다.
              <code>
                IntStrea.iterate(0, n->n<100, n-> n+4)
                        .forEach(System.out::println);
              </code>

              - 언제까지 작업을 수행할 것인지를 결정하는 filter는 사용할 수 없다.
                filter 메서드는 언제 이 작업을 중단해야 하는지를 알 수 없기 때문이다.
                그래서 스트림 쇼트서킷을 지원하는 takeWhile을 이용하는 것이 해법이다.
                <code>
                    IntStream.iterate(0, n-> n+4)
                              .takeWhile(n->n<100)
                              .forEach(System.out::println);
                </code>

        2) iterate - 피보나치 수열
            - 피보나치 수열은 0, 1로 시작하며 이후의 숫자는 이전 두 숫자를 더한 값이다.
            - 피보나치 수열 집합도 비슷한 형태로 구성된다.
            <code>
                Stream.iterate(new int[]{0, 1},
                        ints->new int[]{ints[1], ints[0]+ints[1]})
                        .limit(20).forEach(t -> System.out.println("("+t[0] + " "+t[1]+")"));
            </code>
            => iterate 메서드를 이용해서 피보나치 수열의 집합을 20개 만드는 것이다.

        3) generate 메서드
            - iterate와 달리 generate는 생산된 각 값을 연속적으로 계산하지 않는다.
            - Supplier<T>를 인수로 바아서 새로운 값을 생산한다.
            <code>
                Stream.generate(Math::random)
                       .limit(5)
                       .forEach(System.out::println);
            </code>







