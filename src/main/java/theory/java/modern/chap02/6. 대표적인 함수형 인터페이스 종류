6. 대표적인 함수형 인터페이스 종류
    - java.util.function은 Java에서 자주 사용되는 함수형 인터페이스를 미리 정의해둔 패키지이다.
    - 대표적으로 다음과 같은 함수형 인터페이스가 존재한다. ( ** chap03 / 1.lambda / 1-5 항목 참조)
        1) Predicate<T> : T -> boolean
            - T타입을 받아서 boolean을 리턴하는 함수형 인터페이스이다.
            - test()로 값을 넘길 수 있으며 or, and, negate 등을 통해 조합할 수 있다.
            <code>
                Predicate<String> isHello = (s) -> s.startWith("Hello");
                isHello.test("Hi"); // false
                isHello.test("Hello"); // true
            </code>

        2) Consumer<T> : T -> void
            - T타입을 받아서 아무 값도 리턴하지 않는 함수형 인터페이스이다.
            - 소비자라고도 하고 accept를 통해 값을 전달한다.
            <code>
                Consumer<Integer> printT = (i) -> System.out.println(i);
                printT.accept(10); // 10 출력
            </code>

        3) Function<T, R> : T -> R
            - T 타입을 받아서 R 타입을 리턴하는 함수형 인터페이스이다.
              (선행 인수를 받아 후행 인수를 리턴함)
            - 아래의 코드는 Integer 타입을 받아 Integer 타입을 리턴한다.
            <code>
                public static void main(String[] args) {
                	Function<Integer, Integer> plus10 = (i) -> i + 10;
                	System.out.println(plus10.apply(1)); // 11 출력
                }
            </code>
            => apply()를 통해 매개변수를 전달할 수 있다.

            - 함수를 조합할 수 있는 default 메서드인 andThen()과 compose()를 제공한다.
            - andThen()은 인수로 들어오는 함수를 나중에 적용하고, compose()는 인수로 들어오는 함수를 먼저 적용한다.
            <code>
                public static void main(String[] args) {
                    Function<Integer, Integer> a = (i) -> i + 10;
                    Function<Integer, Integer> b = (i) -> i * 2;

                    a.andThen(b).apply(2);      // (10 + 2) * 2 = 24
                    a.compose(b).apply(2);      // (2 * 2) + 10 = 14

                }
            </code>

        4) Supplier<T> : () -> T
            - T 타입의 값을 제공하는 함수형 인터페이스이다.
            - 공급자라고 불리며 T에는 받아올 값의 타입을 명시한다.
            - get 으로 값을 받아올 수 있다.
            <code>
                Supplier<Integer> get10 = () -> 10; // 10을 리턴하겠다!
                get10.get();
            </code>

        5) UnaryOperator : T -> T
            - 위에 명시된 Function<T, R>의 특수한 형태로, Function<T, R>의 입력 타입 T와 R이 같을 경우 UnaryOperator<T>로 사용할 수 있다.
            - UnaryOperator는 Function을 상속받았기 때문에 andThen()과 compose() 모두 사용이 가능하다.
            - 예시 : UnaryOperatorExample.java 참조

        6) BiFunction<T,U,R> : (T, U) -> R
            - 두 개의 입력 값 (T, U)를 받아서 R 타입을 리턴하는 함수형 인터페이스이다.
            - 예시 : Operator.java 참조

        7) BinaryOperator : (T, T) -> T
            - BiFunction<T, U, R>의 특수한 형태로, 입력과 출력의 타입이 다를 거라는 가정하에 만들어진 BiFunction과는 다르게
              타입이 하나로 사용될 것을 고려해 만들어진 함수형 인터페이스이다.
            <code>
                // BiFunction<Integer, Integer, Integer> plus = (a, b) -> a + b;
                BinaryOperator<Integer> plus = (a,b) -> a + b;
                System.out.println(plus.apply(10, 20)); // 30 출력
            </code>

        * 만약 세 가지 이상의 인수를 받아 4번째 인수의 리턴 값을 받고 싶을 때는 어떻게 해야할까?
            - 예제 : TriFunctionExample.java 참조





* 출처 : - https://jjingho.tistory.com/80                 // Predicate, Consumer, Function, Supplier, UnaryOperator, BinaryOperator, BiFunction
        -