1. Factory Method Pattern
    - 객체를 생성할 때 어떤 클래스의 인스턴스를 만들지 서브 클래스에서 결정하게 한다.
    - 즉, 인스턴스 생성을 서브 클래스에게 위임한다.
    - 부모 추상 클래스는 인터페이스에만 의존하고 실제로 어떤 구현 클래스를 호출할지는 서브 클래스에서 구현한다.
    - 요약한다면 객체 생성을 대신 수행해주는 공장이다.

2. 장점
    - 생성할 클래스를 미리 알지 못해도 팩토리 클래스가 객체 생성을 담당한다.
    - 객체의 자료형이 하위클래스에 의해 결정한다.
    - 수정에 닫혀있고 확장에는 열려있는 OCP 원칙을 지킬 수 있다.
    * OCP원칙 : src/theory/java/source/gof/creational/factoryMethod/OCP/OCP 원칙 참조

3. 단점
    - 간단한 기능을 사용할 때보다 많은 클래스를 정의해야 하기 때문에 코드량이 증가한다.
    - 객체가 늘어날 때마다 하위클래스 재정의로 인한 불필요한 많은 클래스가 생성된다.

4. 예제
    - 예제 : src/theory/java/source/gof/creational/factoryMethod/Main.java 참조
    - 사용자 관리 프로그램이 있고 네이버 계정으로 가입할 수 있다고 가정한다.


* 출처 : - https://niceman.tistory.com/143
        - https://bcp0109.tistory.com/367
