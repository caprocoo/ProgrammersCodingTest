1. 커맨드 패턴이란?
    - 커맨드 패턴은 특정 기능들을 캠슐화하면서 주어진 여러 기능을 실행할 수 있는 재사용성이 높은 클래스를 설계하는 패턴이다.
    - 즉, 이벤트가 발생했을 때 실행될 기능이 다양하면서도 변경이 필요한 경우에 이벤트를 발생시키는 클래스를 변경하지 않고 재사용하고자 할 때 유용하다.
    - 커맨드 패턴은 요청을 요청에 대한 모든 정보가 포함된 독립 실행형 객체로 변환하는 행동 디자인 패턴이다.
    - 다양한 요청들이 있는 메서드들을 인수화할 수 있도록 하며, 요청의 실행을 지연 또는 대기열에 넣을 수 있도록 하고,
      실행 취소할 수 있는 작업을 지원하도록 한다.

2. 구성요소
    1) Command
        - 실행될 기능에 대한 인터페이스이다.
        - 실행될 기능을 execute 메서드로 선언한다.
    2) ConcreteCommand
        - 실제로 실행되는 기능을 구현한다.
        - 즉, Command라는 인터페이스를 구현한다.
    3) Invoker
        - 기능의 실행을 요청하는 호출자 클래스이다.
    4) Receiver
        - ConcreteCommand에서 execute 메서드를 구현할 때 필요한 클래스이다.
        - 즉, ConcreteCommand의 기능을 실행하기 위해 사용하는 수신자 클래스이다.

2. 장점
    - 단일 책임 원칙
    - 개방 / 폐쇄 원칙
    - 실행 취소 & 다시 실행을 구현할 수 있다.
    - 작업들의 지연된 실행을 구현할 수 있다.
    - 간단한 커맨드들의 집합을 복잡한 커맨드로 조합할 수 있다.

3. 단점
    - 발송자와 수신자 사이에 완전히 새로운 레이어를 도입하기 때문에 코드가 복잡해질 수 있다.

4. 다른 패턴과의 관계
    1) 커맨드 vs 중재자 vs 옵서버 vs 책임 연쇄
        - 책임 연쇄 패턴은 잠재적 수신자의 동적 체인을 따라 수신자 중 하나에 의해 요청이 처리될 때까지 요청을 순차적으로 전달한다.
        - 커맨드 패턴은 발신자와 수신자 간의 단방향 연결을 설립한다.
        - 중재자 패턴은 발신자와 수신자 간의 직접 연결을 제거하여 그들이 중재자 객체를 통해 간접적으로 통신하도록 강제한다.
        - 옵서버 패턴은 수신자들이 요청들의 수신을 동적으로 구독 및 구독 취소할 수 있도록 한다.
    2) 커맨드 vs 전략
        - 둘 다 어떤 작업으로 객체를 매개변수화하는데 사용할 수 있다.
        - 커맨드 패턴은 모든 작업을 객체로 변환할 수 있으며 작업의 매개변수들은 해당 객체의 필드들이 된다.
          이 변환은 작업의 실행을 연기하고, 해당 작업을 대기열에 넣고, 커맨드들의 기록을 저장한 후 해당 커맨드들을 원격 서비스에 보내는 등의 작업을 가능하게 한다.
        - 전략 패턴은 일반적으로 같은 작업을 수행하는 다양한 방법을 설명하므로 단일 컨텍스트 클래스 내에서 이러한 알고리즘들을 교환할 수 있도록 한다.

5. 예제
    - 예제 소스 : - src/theory/java/source/gof/behavioral/command/Main.java 참조


* 출처 : - https://refactoring.guru/ko/design-patterns/command
        - https://gmlwjd9405.github.io/2018/07/07/command-pattern.html
        - https://bamtory29.tistory.com/entry/%EC%BB%A4%EB%A7%A8%EB%93%9C-%ED%8C%A8%ED%84%B4-Command-Pattern


