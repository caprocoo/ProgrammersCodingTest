Generic

1. 제네릭이란? ( JDK 1.5~ )
    : 데이터의 타입을 일반화하는 것을 의미하며 클래스나 메소드에서 사용할 내부 데이터 타입을 컴파일 시에 미리 지정하는 방법.
    - 장점
        1) 클래스나 메소드 내부에서 사용되는 객체의 타입 안정성을 높일 수 있다.
        2) 반환값에 대한 타입 변환 및 타입 검사에 들어가는 노력을 줄일 수 있다.

2. 제네릭의 선언 및 생성
    ex)
    <code>
        class MyArray<T> {
            T element;
            void setElement(T element) { this.element = element; }
            T getElement() { return element; }
        }
    </code>
    - 'T'를 타입 변수라고 하며, 임의의 참조형 타입을 의미한다.
    - 여러 개의 타입 변수는 쉼표(,)로 구분하여 명시할 수 있다.
    - 기본 타입을 바로 사용할 수 없고 래퍼(wrapper) 클래스를 사용해야만 한다.
    - JAVA SE 7~ 부터 인스턴스 생성 시 타입을 추정할 수 있는 경우 타입 생략 가능
        ex)
        <code>
            MyArray<Integer> myArr = new MyArray<>(); // Java SE 7부터 가능함.
        </code>

3. 다양한 제네릭 표현 - 타입 변수의 제한
    - 제네릭은 'T'와 같은 타입 변수를 사용하여 타입을 제한하는데,
      이때 extends 키워드를 사용하면 타입 변수에 특정 타입만을 사용할 수 있도록 제한할 수 있다.
        <code>
            class AnimalList<T extends LandAnimal> { ... }
        </code>
    - 주의 : 클래스가 아닌 인터페이스를 구현할 경우에도 implements가 아닌 extends 사용
        <code>
           interface WarmBlood { ... }
           ...
           class AnimalList<T extends WarmBlood> { ... } // implements 키워드를 사용해서는 안됨.
        </code>

4. 다양한 제네릭 표현 - 와일드카드의 사용
    : 와일드카드란 이름에 제한을 두지 않음을 표현하는 데 사용되는 기호를 의미한다. (물음표 사용)
    <code>
        <?>           // 타입 변수에 모든 타입을 사용할 수 있음.
        <? extends T> // T 타입과 T 타입을 상속받는 자손 클래스 타입만을 사용할 수 있음.
        <? super T>   // T 타입과 T 타입이 상속받은 조상 클래스 타입만을 사용할 수 있음.
    </code>


5. 제네릭 클래스 (Java Generic Class)
    : 


* 출처 :
 - http://www.tcpschool.com/java/java_generic_concept
 - http://www.tcpschool.com/java/java_generic_various
 - https://pathas.tistory.com/160
