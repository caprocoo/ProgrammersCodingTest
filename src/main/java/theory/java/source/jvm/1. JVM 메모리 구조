1. JVM 이란?
    - JVM 이란 Java Virtual Machine 의 약자로, 자바 가상 머신이라고 부른다.
    - 자바와 운영체제 사이에서 중개자 역할을 수행하며 자바가 운영체제에 구애받지 않고 프로그램을 실행할 수 있도록 도와준다.
    - 가비지 컬렉터를 사용한 메모리 관리도 자동으로 수ㅐㅎㅇ하며, 다른 하드웨어와 다르게 레지스터 기반이 아닌 스택 기반으로 동작한다.

2. JVM 실행 단계
    1) 자바 컴파일러에 의해 자바 소스 파일은 바이트 코드로 변환된다.
    2) 이러한 바이트 코드를 JVM에서 읽어들인다.
    3) 어떤 운영체제든 간에 프로그램을 실행할 수 있도록 만든다.

3. JVM 메모리 구조
    - JVM 의 구조는 크게 보면, Garbage Collector, Execution Engine, Class Loader, Runtime Data Area로, 4가지로 나눌 수 있다.

    1) Class Loader
        - JVM 내로 클래스 파일을 로드하고, 링크를 통해 배치하는 작업을 수행하는 모듈이다.
        - 런타임 시에 동적으로 클래스를 로드한다.

    2) Execution Engine
        - Class Loader 를 통해 JVM 내의 Runtime Data Area 에 배치된 바이트 코드들을 명령어 단위로 읽어서 실행한다.
        - JVM 은 모든 코드를 JIT 컴파일러 방식으로 실행하지 않고, 인터프리터 방식을 사용하다가 일정 기준이 넘어가면 JIT 컴파일러 방식으로 실행한다.

    3) Garbage Collector
        - 힙 메모리 영역에서 생성된 객체들 중에서 참조되지 않은 객체들을 탐색 후 제거하는 역할을 한다.
        - 이때, Garbage Collector 가 역할을 하는 시간은 언제인지 알 수 없다.

    4) Runtime Data Area
        - JVM 의 메모리 영역으로 자바 애플리케이션을 실행할 때 사용되는 데이터들을 적재하는 영역이다.
        - Method area, Heap Area, Stack Area, PC Register, Native Method Stack 으로 나눌 수 있다.

4. Runtime Data Area
    1) Method Area
        - 모든 쓰레드가 공유하는 메모리 영역이다.
        - Method Area 는 클래스, 인터페이스, 메서드, 필드, Static 변수 등의 바이트 코드를 보관한다.

    2) Heap Area
        - 모든 쓰레드가 공유하며 new 키워드로 생성된 객체와 배열이 생성되는 영역이다.
        - 메서드 영역에 로드된 클래스만 생성이 가능하고 Garbage Collector가 참조되지 않는 메모리를 확인하고 제거하는 영역이다.

    3) Stack Area
        - 메서드 호출 시마다 각각의 스택 프레임(메서드만을 위한 공간)이 생성한다.
        - 메서드 안에서 사용되는 값들을 저장하고 호출된 메서드의 매개변수, 지역변수, 리턴 값 및 연산 시 일어나는 값들을 임시로 저장한다.
        - 메서드 수행이 끝나면 프레임별로 삭제한다.

    4) PC Register
        - 쓰레드가 시작될 때 생성되며 생성될 때마다 생성되는 공간으로 쓰레드마다 하나씩 존재한다.
        - 쓰레드가 어떤 부분을 무슨 명령으로 실행해야할 지에 대한 기록을 하는 부분으로 현재 수행 중인 JVM 명령의 주소를 갖는다.

    5) Native Method Stack
        - 자바 외 언어로 작성된 네이티브 코드를 위한 영역이다.
   

* 출처 : - https://steady-coding.tistory.com/305