1. Java Bytecode 이란?
    - Java 소프트웨어를 개발하기 위해 JDK 를 설치하고, Java 소프트웨어를 실행시키기 위해 JRE 를 설치한다.
    - 개발의 실행 결과를 확인하기 위해 Compile 과정을 거치는데, JDK 나 JRE 에 함께 포함되는 'javac.exe' 실행 파일이 수행하는 것이다.
      이는 개발자가 만든 '.java' 파일을 JVM 이 이해할 수 있도록 Bytecode 로 변환하고 '.class' 파일를 만드는 것을 의미한다.
      '.class' 파일에 존재하는 데이터가 Java Bytecode 인 것이다.
    - Java Bytecode 는 우리가 개발한 자바 프로그램(코드)를 배포하는 가장 작은 단위이다.

2. Java Bytecode 의 구성요소
    1) Class Format
        - Java Bytecode 는 나름의 포맷이 정해져있고, 해당 포맷으로 표현이 된다.
        1-1) magic
            - class 파일의 첫 4바이트로 Java class 파일이 맞는지 구분하는 용도로 쓰인다.
            - PE Header, Image Signatur 과 같은 용도로 보고 CAFEBABE 라는 이름을 가지고 있다.

        1-2) minor_version, major_version
            - class 의 version 을 나타낸다.
            - JDK 버전에 따라 다른 수가 나오게 된다.

        1-3) constant_pool_count
            - class 파일의 상수 풀의 갯수를 나타내는 용도로 사용된다.

        1-4) access_flags
            - 주로 class 의 public, final 과 같은 modifier 정보를 나타낸다.

        1-5) interface_count
            - class 가 구현한 interface 의 개수와 각 interface 에 대한 constant_pool 내의 index 를 나타낸다.

    2) Type 표현
        2-1) B : byte
        2-2) C : char
        2-3) I : int
        2-4) L<classname> : reference

    3) Constant Pool
        - JVM 은 Host OS 의 메모리를 최대한 효율적으로 이용하도록 설계가 되어있다.
        - Constant Pool 은 JVM 이 동적으로 코드를 실행시킬 때 모든 데이터를 즉시 생성하는 것이 아니라
          Constant Pool 에 저장하고 Constant Pool 에 존재하는 데이터를 우선적으로 가져와 메모리를 더욱 효율적으로 사용할 수 있게 된다.
        - # 형태의 해시코드로 시작하는 것이 특징이다.

    4) Instruction Set
        - 컴파일된 결과로 생성되는 코드의 명령어 집합이다.
        - 명령어는 OpCode 와 operands 로 구성되는데 1 Byte OpCode 와 2 Byte Operands 로 구성된다.


* 출처 : - https://wonit.tistory.com/589