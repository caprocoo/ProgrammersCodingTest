1. Promise란?
    : 프로미스는 자바스크립트 비동기 처리에 사용되는 객체이다.

    - ajax 콜백 함수 사용 비동기 처리
    <code>
        function getData(callbackFunc) {
          $.get('url 주소/products/1', function(response) {
            callbackFunc(response); // 서버에서 받은 데이터 response를 callbackFunc() 함수에 넘겨줌
          });
        }

        getData(function(tableData) {
          console.log(tableData); // $.get()의 response 값이 tableData에 전달됨
        });
    </code>

    - promise 비동기 처리
    <code>
        function getData(callback) {
          // new Promise() 추가
          return new Promise(function(resolve, reject) {
            $.get('url 주소/products/1', function(response) {
              // 데이터를 받으면 resolve() 호출
              resolve(response);
            });
          });
        }

        // getData()의 실행이 끝나면 호출되는 then()
        getData().then(function(tableData) {
          // resolve()의 결과 값이 여기로 전달됨
          console.log(tableData); // $.get()의 reponse 값이 tableData에 전달됨
        });
    </code>

2. 프로미스의 3가지 상태 (states)
    - 상태란 프로미스의 처리 과정을 의미하며 new Promise()로 생성하고 종료될 때까지 3가지 상태를 갖는다.
    1) Pending (대기) : 비동기 처리 로직이 아직 완료되지 않은 상태
    <code>
        new Promise(function(resolve, reject) {
          // ...
        });
    </code>
    - 위와 같이 new Promise() 메서드를 호출할 때 콜백 함수를 선언할 수 있고, 인자는 resolve, reject이다.

    2) Fulfilled (이행) : 비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태
    <code>
        new Promise(function(resolve, reject) {
          resolve();
        });
    </code>
    => 위와 같이 resolve를 실행하면 이행(Fulfiled) 상태가 된다.

     <code>
        function getData() {
          return new Promise(function(resolve, reject) {
            var data = 100;
            resolve(data);
          });
        }

        // resolve()의 결과 값 data를 resolvedData로 받음
        getData().then(function(resolvedData) {
          console.log(resolvedData); // 100
        });
     </code>
     => 이행 상태가 되면 위와 같이 then()을 사용하여 처리 결과 값을 받을 수 있다.
        (이행 상태는 다르게 표현하면 완료 상태이다.)

    3) Rejected (실패) : 비동기 처리가 실패하거나 오류가 발생한 상태
        <code>
            new Promise(function(resolve, reject) {
              reject();
            });
        </code>
        => 위와 같이 reject를 실행하면 실패(Rejected) 상태가 된다.

         <code>
            function getData() {
              return new Promise(function(resolve, reject) {
                reject(new Error("Request is failed"));
              });
            }

            // reject()의 결과 값 Error를 err에 받음
            getData().then().catch(function(err) {
              console.log(err); // Error: Request is failed
            });
         </code>
         => 실패 상태가 되면 실패한 이유(실패 처리의 결과 값)를 catch()로 받을 수 있다.

3. 예제
    <code>
        function getData() {
          return new Promise(function(resolve, reject) {
            $.get('url 주소/products/1', function(response) {
              if (response) {
                resolve(response);
              }
              reject(new Error("Request is failed"));
            });
          });
        }

        // 위 $.get() 호출 결과에 따라 'response' 또는 'Error' 출력
        getData().then(function(data) {
          console.log(data); // response 값 출력
        }).catch(function(err) {
          console.error(err); // Error 출력
        });
    </code>

4. 여러 개의 프로미스 연결하기 (Promise Chaining)
    <code>
        new Promise(function(resolve, reject){
          setTimeout(function() {
            resolve(1);
          }, 2000);
        })
        .then(function(result) {
          console.log(result); // 1
          return result + 10;
        })
        .then(function(result) {
          console.log(result); // 11
          return result + 20;
        })
        .then(function(result) {
          console.log(result); // 31
        });
    </code>
    - 위와 같이 then()을 붙여 사용할 수 있다.
    - setTimeOut()을 사용해 2초 후에 resolve()를 호출한다.

5. 프로미스의 에러 처리 방법
    <code>
        function getData() {
          return new Promise(function(resolve, reject) {
            reject('failed');
          });
        }

        // 1. then()의 두 번째 인자로 에러를 처리하는 코드
        getData().then(function() {
          // ...
        }, function(err) {
          console.log(err);
        });

        // 2. catch()로 에러를 처리하는 코드
        getData().then().catch(function(err) {
          console.log(err);
        });
    </code>
    - 여기서는 에러 처리 방법이 2가지가 있는데 가급적 catch()를 사용한다.
      왜냐하면 then()의 매부에서 오류가 나는 경우 오류를 제대로 잡아내지 못하기 때문이다.



* 출처 : - https://joshua1988.github.io/web-development/javascript/promise-for-beginners/