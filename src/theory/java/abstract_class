1. 추상 클래스(Abstract Class)란?
    : 객체 간의 공통적 특성을 추출한 클래스.
    - 추상의 사전적 의미는 사물이나 표상을 어떤 성질·공통성·본직에 착안하여 그것을 추출하여 파악하는 것.
    ex) 강아지, 고양이, 염소라는 객체의 공통점은 동물이다.
        => 여기서 동물은 구체적인 실체라기보다 '수명', '짖기' 와 같은 필드와 메서드를 가지고 있는
           모든 동물 객체들의 공통되는 특성을 갖고 있는 추상적인 클래스이다.
    - 추상 클래스는 추상 메서드를 가지지 않아도 상관이 없다.
      하지만, 추상 메서드를 가지는 클래스는 반드시 추상 클래스가 되어야 한다.

2. 추상 클래스 사용 이유

    1) 객체들의 필드와 메서드의 이름을 통일하여 소스의 가독성을 높이기 위함
        - 변수, 메서드는 네이밍이 소스 가독성에 큰 영향을 준다 : 명칭만으로도 용도를 추측할 수 있기 때문.
          => 이러한 변수와 메서드의 명칭은 각각의 클래스마다 최대한 통일을 시켜줘야 한다.

    2) 개발의 효율성을 증대시키기 위함
        - 많은 객체들을 생성할 때 모든 객체들에 공통적인 메서드와 필드들을 추상 클래스로 만들고,
          이 추상 클래스를 하위 자식들이 상속받아 필요한 필드와 메서드를 그대로 상속하고,
          추상 클래스는 자식에서 재정의하는 방식을 통해 개발의 효율성을 증대시킬 수 있다.

3. 추상 클래스 사용법
    : abstract라는 키워드를 붙인다.
    - 추상 클래스로 만들게 되면 new 연산자를 사용하여 직접 객체를 만들지 못하고
      오직 상속을 통해 자식 클래스만 만드는 용도로 사용 가능하다.
    - 내부에 메서드를 생성할 수 있는데 껍데기만 생성하고 자식 클래스에서 필수로 오버 라이딩하여 사용한다.

    1) 추상 클래스 - Animal
    <code>
        package theory.java.source._abstract_class;


        public abstract class Animal {
            String name;
            int age;

            public Animal(String name, int age) {
                this.name = name;
                this.age = age;
            }

            public void move() {System.out.println("이동한다");}
            public void eat() {System.out.println("먹는다");}
            public abstract void bark(); //짖는 소리는 동물마다 다르므로 추상메서드로 생성
        }
    </code>
    => 추상 클래스도 일반 클래스와 마친가지로 필드, 생성자, 메서드를 선언할 수 있다.
       또한 자식 객체가 생성될 때 super를 호출하므로 생성자가 반드시 있어야 한다.

    2) Animal을 상속받은 Dog
    <code>
        package theory.java.source._abstract_class;

        public class Dog extends Animal{

            public Dog(String name, int age) {
                super(name, age);
            }

            @Override
            public void bark() { //메서드 오버라이딩
                System.out.println("멍멍!!");
            };
        }

    </code>

    3) Animal을 상속받은 Cat
    <code>
        package theory.java.source._abstract_class;

        public class Cat extends Animal{

            public Cat(String name, int age) {
                super(name, age);
            }

            @Override
            public void bark() { //메서드 오버라이딩
                System.out.println("야옹~~");
            };
        }
    </code>

    4) Main에서 확인
    <code>
        package theory.java.source._abstract_class;

        public class Main {

            public static void main(String[] args) {
                Dog dog = new Dog("강아지",3);
                Cat cat = new Cat("고양이",3);

                dog.move();
                dog.bark();

                cat.move();
                cat.bark();
            }
        }
    </code>


* 출처 : https://coding-factory.tistory.com/866

