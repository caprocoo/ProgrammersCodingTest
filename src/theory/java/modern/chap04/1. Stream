1. Stream 이란?   P.135
    - Java 8에 새롭게 추가된 기능이다.
    - 선언형으로 컬렉션 데이터를 처리할 수 있다. 즉, 데이터를 처리하는 임시 구현 코드 대신 질의로 표현할 수 있다.
    - Stream을 이용하면 멀티쓰레드 코드를 구현하지 않아도 데이터를 투명하게 병렬로 처리할 수 있다.
    - filter, sorted, map, collect와 같은 여러 빌딩 블록 연산을 연결해서 복잡한 데이터 처리 파이프라인을 만들 수 있다.
       (메서드 결과 흐름 : filter -> sorted -> map -> collect)
    - 스트림 API 특징
        1) 선언형
            : 더 간결하고 가독성이 좋아진다.
        2) 조립할 수 있음
            : 유연성이 좋아진다.
        3) 병렬화
            : 성능이 좋아진다.

    1-1 Stream 시작하기
        1) 예제 : src/theory/java/modern/chap04/StreamBasicExample.java 참조
            (1) 리스트를 포함하는 menu에 stream 메서드를 호출해서 Stream을 얻는다.
            (2) 데이터 소스는 요리 리스트(메뉴)이며, 데이터 소스는 연속된 요소를 Stream에 제공한다.
            (3) filter, map, limit, collect로 이어지는 일련의 데이터 처리 연산을 적용한다.
            (4) collect를 제외한 모든 연산은 서로 파이프라인을 형성할 수 있도록 Stream을 반환한다.
            (5) 마지막에 collect를 호출하기 전까지는 menu에서 무엇도 선택되지 않으며 출력 결과도 없다.

        2) 각 메서드 설명
            (1) filter
                - 람다를 인수로 받아 Stream에서 특정 요소를 제외시킨다.
                - 예제에서는 람다를 전달해서 300칼로리 이상의 요리를 선택한다.

            (2) map
                - 람다를 이용해서 한 요소를 다른 요소로 변환하거나 정보를 추출한다.
                - 예제에서는 메서드 참조를 통해 각각의 요리명을 추출한다.

            (3) limit
                - 정해진 개수 이상의 요소가 Stream에 저장되지 못하게 Stream 크기를 축소 truncate한다.

            (4) collect
                - collect가 다양한 변환 방법을 인수로 받아 Stream에 누적된 요소를 특정 결과로 변환시킨다.
                - 예제에서의 toList()는 Stream을 List로 변환하라고 지시하는 인수이다.

    1-2 Stream vs Collection
        - 데이터를 언제 계산하는냐가 컬렉션과 스트림의 가장 큰 차이다.
        - 컬렉션은 현재 자료구조가 포함하는 모든 값을 메모리에 저장하는 자료구조다.
          (컬렉션에 요소를 추가하거나 컬렉션의 요소를 삭제할 수 있다.
           이러한 연산을 수행할 때마다 컬렉션의 모든 요소를 메모리에 저장해야 하며 컬렉션에 추가하려는 요소는 미리 계산되어야 한다.)
        - 스트림은 이론적으로 요청할 때만 요소를 계산하는 고정된 자료구조이다.
          (결과적으로 스트림은 생산자와 소비자 관계를 형성한다. - 사용자가 데이터를 요청할 때만 값을 계산한다.)

        1) Stream은 딱 한 번만 탐색할 수 있다.
            - 탐색된 스트림의 요소는 소비된다.
            <code>
                List<String> title = Arrays.asList("a", "b", "c");
                Stream<String> s = title.stream();
                s.forEach(System.out::println);     // title의 각 단어를 출력
                s.forEach(System.out::println);     // java.lang.IllegalStateException
                                                       : 스트림이 이미 소비되었거나 닫힘
            </code>

        2) 외부 반복과 내부 반복
            - 예시 : src/theory/java/modern/chap04/InnerOuterIterator.java 참조
            - 컬렉션 인터페이스를 사용하려면 사용자가 직접 요소를 반복해야 하는데 이를 외부 반복이라 한다.
              (명시적으로 컬렉션 항목을 하나씩 가져와서 처리한다.)
            - 스트림 라이브러리는 반복을 알아서 처리하고 결과 스트림값을 어딘가에 저장해주는 내부 반복을 사용한다.
              (작업을 투명하게 병렬로 처리하거나 더 최적화된 다양한 순서로 처리할 수 있다.)

    1-3 Stream 연산
        - 연결할 수 있는 스트림 연산을 중간연산이라 하며, 스트림을 닫는 연산을 최종 연산이라 한다.

        1) 중간 연산
        - 단말 연산을 스트림 파이프라인에 실행하기 전까지는 아무 연산도 수행하지 않는다.
          (즉, 게으르다. : 중간 연산을 합친 다음에 합쳐진 중간 연산을 최종 연산으로 한 번에 처리하기 때문이다.)

          (1) filter
            - 반환 형식 : Stream<T>
            - 연산의 인수 : Predicate<T>
            - return : T -> boolean

          (2) map
            - 반환 형식 : Stream<R>
            - 연산의 인수 : Function<T, R>
            - return : T -> R

          (3) limit
            - 반환 형식 : Stream<T>

          (4) sorted
            - 반환 형식 : Stream<T>
            - 연산의 인수 : Comparator<T>
            - return : (T, T) -> int

          (5) distinct
            - 반환 형식 : Stream<T>


        2) 최종 연산
        - 스트림 파이프라인에서 결과를 도출한다.
           (1) forEach
            - 반환 형식 : void
            - 목적 : 스트림의 각 요소를 소비하면서 람다를 적용한다.

           (2) count
           - 반환 형식 : long (generic)
           - 목적 : 스트림의 요소 개수를 반환한다.

           (3) collect
           - 목적 : 스트림을 리듀스해서 리스트, 맵, 저수 형식의 컬렉션을 만든다.





















