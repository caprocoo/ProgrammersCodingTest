* 동작 파라미터화 코드 전달하기 p.67

2. Predicate?
    - argument를 받아 boolean 값을 반환하는 함수형 인터페이스
        1) 함수형 인터페이스란 1개의 추상 메소드를 갖고 있는 인터페이스로 써 @FunctionalInterface 어노테이션을 사용한다.
        2) default나 static 메소드의 제한은 없다.
        3) Java8부터 지원된 람다식은 함수형 인터페이스로 접근이 가능하다.
        4) Predicate 외에도 Consumer, Supplier, Function, Comparator 등이 있다.
    - functional method : test();

    <code>
        @FunctionalInterface
        interface Square {
            int calculate(int x);
        }

        class Test {
            public static void main(String args[]) {
                Square s = (int x) -> x * x;
                System.out.println(s.calculate(5));
            }
        }
    </code>
    => 여기서 Square가 함수형 인터페이스이다.

    - 종류
        1. test()
            : 전달한 argument가 충족되면 true를 return한다.
            <code>
                @Test
                public void test() {
                    Predicate<Integer> predicate = (num) -> num < 10;
                    assertThat(predicate.test(5)).isTrue();
                }
            </code>
        2. and()
            : 두 Predicate를 잇는 역할이다. (&&)
            <code>
                @Test
                public void test() {
                    Predicate<Integer> predicate1 = (num) -> num < 10;
                    Predicate<Integer> predicate2 = (num) -> num > 5;

                    assertThat(predicate1.and(predicate2).test(7)).isTrue();
                }
            </code>
        3. negate()
            : Predicate.test()의 결과와 반대로 return 하는 Predicate 생성한다.
            <code>
                @Test
                public void test() {
                    Predicate<Integer> originPredicate = (num) -> num < 10;
                    Predicate<Integer> negatePredicate = originPredicate.negate();

                    assertThat(negatePredicate.test(5)).isFalse();
                }
            </code>
        4. or()
            : 두 Predicate를 잇는 역할이다. (||)
            <code>
                @Test
                public void test() {
                    Predicate<Integer> predicate1 = (num) -> num < 10;
                    Predicate<Integer> predicate2 = (num) -> num > 5;

                    assertThat(predicate1.or(predicate2).test(3)).isTrue();	// predicate1만 충족
                    assertThat(predicate1.or(predicate2).test(12)).isTrue();	// predicate2만 충족
                }
            </code>
        5. isEqual()
            : 두 객체가 동일한지 판단, Stream에서 사용할 수 있다.
            <code>
                @Test
                public void test1() {
                    Predicate<Integer> predicate = Predicate.isEqual(5);
                    assertThat(predicate.test(5)).isTrue();
                    assertThat(predicate.test(6)).isFalse();
                }

                @Test
                public void test2() {
                    Stream<Integer> stream = IntStream.range(1, 10).boxed();
                    stream.filter(Predicate.isEqual(5))
                            .forEach(System.out::println);
                }
            </code>


* 출처 : - https://yeonyeon.tistory.com/200   // Predicate