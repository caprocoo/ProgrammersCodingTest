* 모던 자바 인 액션 chap06 - Collector Interface p.224

4. Collector Interface
    - Collector Interface는 리듀싱 연산을 어떻게 구현할지 제공하는 메서드 집합으로 구성된다.
    - 이전 chap06-1,2,3 에서 toList나 groupingBy 등 Collector Interface를 구현하는 많은 컬렉터를 살펴봤다.

    * Collector Interface의 시그니처와 다섯 개의 메서드 정의
    <code>
        public interface Collector<T, A, R> {
            Supplier<A> supplier();
            BiConsumer<A, T> accumulator();
            Function<A, R> finisher();
            BinaryOperator<A> combiner();
            Set<Characteristics> characteristics();
        }
    </code>
    - 위 코드는 다음처럼 설명이 가능하다.
        - T는 수집될 스트림 항목의 제네릭 형식이다.
        - A는 누적자. 즉 수집 과정에서 중간 결과를 누적하는 객체의 형식이다.
        - R은 수집 연산 결과 객체의 형식(항상 그런 것은 아니지만 대게 컬렉션 형식)이다.

    1) Collector Interface Method
        (1) Supplier : 새로운 결과 컨테이너 만들기
            - supplier 메서드는 빈 결과로 이루어진 Supplier를 반환해야 한다.
            - 즉, supplier는 수집 과정에서 빈 누적자 인스턴스를 만드는 파라미터가 없는 함수다.
            <code>
                // ToListCollector에서 supplier는 다음처럼 빈 리스트를 반환한다.
                public Supplier<List<T>> supplier(){
                    return () -> new ArrayList<T>();
                }

                // 생성자 참조를 전달하는 방법
                public Supplier<List<T>> supplier(){
                    return ArrayList::new;
                }
            </code>

        (2) accumulator : 결과 컨테이너에 요소 추가하기
            - accumulator 메서드는 리듀싱 연산을 수행하는 함수를 반환한다.
            - 스트림에서 n번째 요소를 탐색할 때 두 인수, 즉 누적자와 n번째 요소를 함수에 적용한다.
            - 함수의 반환값은 void, 즉 요소를 탐색하면서 적용하는 함수에 의해 누적자 내부상태가 바뀌므로 누적자가 어떤 값일지 단정할 수 없다.
            <code>
                // ToListCollector 에서는 이미 탐색한 항목을 포함하는 리스트에 현재 항목을 추가하는 연산을 한다.
                public BiConsumer<List<T>, T> accumlator(){
                    return (list, item) -> list.add(item);
                }

                public BiConsumer<List<T>, T> accumlator(){
                    return List::add;
                }

            </code>

        (3) finisher : 최종 변환값을 결과 컨테이너로 적용하기
            - finisher 메서드는 스트림 탐색을 끝내고 누적자 객체를 최종 결과로 반환하면서 누적 과정을 끝낼 때 호출할 함수를 반환해야 한다.
            <code>
                public Function<List<T>, List<T>> finisher(){
                    return Function.identity();
                }
            </code>

        (4) combiner : 두 결과 컨테이너 병합
            - 스트림의 서로 다른 서브파트를 병렬로 처리할 때 누적자가 이 결과를 어떻게 처리할지 정의한다.
            <code>
                public BinaryOperator<List<T>> combiner(){
                    return (list1, list2) ->{
                        list1.addAll(list2);
                        return list1;
                    }
                }
            </code>

        (5) Characteristics
            - Characteristics 메서드는 컬렉터의 연산을 정의하는 Characteristics 형식의 불변 집합을 반환한다.
            - Characteristics는 스트림을 병렬로 리듀스할 것인지 그리고 병렬로 리듀스하면 어떤 최적화를 선택해야 할지 힌트를 제공한다.
            - Characteristics는 다음 세 항목을 포함한다.
                (5-1) UNORDERED
                    : 리듀싱 결과는 스트림 요소의 방문 순서나 누적 순서에 영향을 받지 않는다.
                (5-2) CONCURRENT
                    - 다중 스레드에서 accumulator 함수를 동시에 호출할 수 있으며 이 컬렉터는 스트림의 병렬 리듀싱을 수행할 수 있다.
                    - 컬렉터의 플래그에 UNORDERED를 함께 설정하지 않았다면
                      데이터의 소스가 정렬되어 있지 않은 상황에서만 병렬 리듀싱을 수행할 수 있다.
                (5-3) IDENTITY_FINISH
                    - finisher 메서드가 반환하는 함수는 단순히 identity를 적용할 뿐이므로 이를 생략할 수 있다.
                    - 누적자 A를 결과 R로 안전하게 형변화할 수 있다.

    2) 응용하기
        - 지금까지 정리한 5가지 메서드를 이용하면 자신만의 커스텀 ToListCollector를 구현할 수 있다.
        - 예제 : src/theory/java/modern/chap06/ToListCollector.java 참조
        <code>
              List<Dish> dishes = menu.stream().collect(Collectors.toList());           // toList()를 사용
              List<Dish> dishes1 = menu.stream().collect(new ToListCollector<Dish>());  // Custom ToListCollector 사용
        </code>

    3) 커스텀 컬렉터를 구현하여 성능 개선하기
        - n 이하의 자연수를 소수와 비소수로 분류하기
        <code>
            public boolean isPrime(int candidate){
                int candidateRoot = (int)Math.sqrt(candidate);
                return IntStream.rangeClosed(2, candidateRoot)
                        .noneMatch(i -> candidate % i == 0);
            }
        </code>
        - 제곱근 이하로 대상의 숫자 범위를 제한하여 isPrime을 개선했다.
        - 커스텀 컬렉터를 이용하면 성능을 더 개선할 수 있다.

        (1) 소수로만 나누기
            - 






