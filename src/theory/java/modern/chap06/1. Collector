* 모던 자바 인 액션 chap06 - 컬렉터란 무엇인가 p.199

1. 컬렉터란 무엇인가?
    - Collector 인터페이스 구현은 스트림의 요소를 어떤 식으로 도출할지 지정한다.
    - chap05에서는 '각 요소를 리스트로 만들기'를 의미하는 'toList'를 사용했다.
    - 여기서는 'groupingBy'를 이용해서 '각 키 버킷 그리고 각 키 버킷에 대응하는 요소 리스트를 값으로 포함하는 맵을 만들기'를 사용한다.
    - Collectors에서 제공하는 메서드의 기능은 크게 세 가지로 구분할 수 있다.
        1) 스트림 요소를 하나의 값으로 리듀스하고 요약
        2) 요소 그룹화
        3) 요소 분할

    1-1 리듀싱과 요약
        - 컬렉터로 스트림의 항목을 컬렉션으로 재구성할 수 있다.
        - 좀 더 일반적으로 말해 컬렉터로 스트림의 모든 항목을 하나의 결과로 합칠 수 있다.
        - 트리를 구성하는 다수준 맵, 메뉴의 칼로리 합계를 가리키는 단순한 정수 등 다양한 형식으로 결과가 도출될 수 있다.

        1) 요약 연산
            - 스트림에 있는 객체의 숫자 필드의 합계나 평균 등을 반환하는 연산에도 리듀싱 기능이 자주 사용되는데 이를 요약 연산이라 부른다.

            (1) 합계 : summingInt, summingDouble, summingLong
                - 특별한 요약 팩토리 메서드로써 객체를 int, double, long 으로 반환한다.
                <code>
                    int total = menu.stream().collect(Collectors.summingInt(Dish::getCalories));
                    double total2 = menu.stream().collect(Collectors.summingDouble(Dish::getCalories));
                    long total3 = menu.stream().collect(Collectors.summingLong(Dish::getCalories));
                    System.out.println(total);
                    System.out.println(total2);
                    System.out.println(total3);
                </code>

            (2) 평균 : averagingInt, averagingDouble, averagingLong
                - 숫자 집합의 평균을 구할 수 있다.
                <code>
                    double average = menu.stream().collect(Collectors.averagingInt(Dish::getCalories));
                    double average2 = menu.stream().collect(Collectors.averagingDouble(Dish::getCalories));
                    double average3 = menu.stream().collect(Collectors.averagingLong(Dish::getCalories));
                    System.out.println(average);
                    System.out.println(average2);
                    System.out.println(average3);
                </code>

            (3) 최댓값 & 최솟값 : maxBy, minBy
                <code>
                    Comparator<Dish> dishCaloriesComparator = Comparator.comparingInt(Dish::getCalories);
                    Optional<Dish> mostCalorieDish = menu.stream().collect(Collectors.maxBy(dishCaloriesComparator));
                    System.out.println(mostCalorieDish.get());
                </code>

            (4) 두 개 이상의 연산을 한 번에 수행 - 요소 수, 합계, 평균, 최댓값, 최솟값 등
                <code>
                    IntSummaryStatistics menuStatistics = menu.stream().collect(Collectors.summarizingInt(Dish::getCalories));
                    System.out.println(menuStatistics);
                </code>
                => count, sum, min, max, average의 값이 모두 나온다.

        2) 문자열 연결
            - joining 팩토리 메서드를 이용해서 스트림의 각 객체에 toString 메서드를 호출해서 추출한 모든 문자열을 하나의 문자열로 연결해서 반환한다.
            <code>
                String shortMenu = menu.stream().map(Dish::getName).collect(Collectors.joining());
                System.out.println(shortMenu);
                // return : porkbeefchickenfrench friesriceseason fruitpizzaprawnssalmon
            </code>

            - 만약 위의코드에서 Dish 클래스가 toString을 내포하고 있으면 아래와 같이 표현할 수 있다.
            <code>
                String shortMenu = menu.stream().collect(Collectors.joining());
            </code>

            - 두 요소 사이에 구분 문자열을 넣을 수 있다.
            <code>
                String shortMenu = menu.stream().map(Dish::getName).collect(Collectors.joining(", "));
                System.out.println(shortMenu);
                // return : pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon
            </code>

        3) 범용 리듀싱 요약 연산
            - 상위 정리한 1)요약 연산과 2)문자열연결 에서의 모든 컬렉터는 reducing 팩토리 메서드로도 정의할 수 있다.
            - 그렇다면 reducing으로 사용하지 왜 1)과 2)로 나눈 것일까?
              => 프로그래밍적 편의성 & 가독성 때문이다!
            - reducing은 인수 세 개를 받는다.
                (1) 첫 번째 인수는 리듀싱 연산의 시작값이거나 스트림에 인수가 없을 때는 반환값이다.
                    (숫자 합계에서는 인수가 없을 때 반환값으로 0이 적합하다.)
                (2) 두 번째 인수는 'Dish::getCalorie'와 같은 변환함수가 들어간다.
                (3) 세 번째 인수는 같은 종류의 두 항목을 하나의 값으로 더하는 BinaryOperator이다.
                <code>
                    int totalCalories = menu.stream().collect(Collectors.reducing(0, Dish::getCalories, (i, j) -> i + j));
                    System.out.println(totalCalories);
                    // return : 4300
                </code>

            - 한 개의 인수를 갖는 reducing 팩토리도 존재한다.
            <code>
                Optional<Dish> mostCaloriesDish = menu.stream().collect(Collectors.reducing((i, j) -> i.getCalories() > j.getCalories() ? i : j));
                System.out.println(mostCaloriesDish.get());
                // return : pork
            </code>
            => 가장 칼로리가 높은 요리를 찾는 방법
0
        4) collect vs reduce
            - chap05-1 Stream 활용편에서 reduce 예제를 살펴보고 이번 장에서 collect를 살펴보고 있다.
            - toList 컬렉터를 사용하는 collect 대신 reduce 메서드를 사용하여 다음과 같이 나타낼 수 있다.
            - collect 메서드는 결과를 누적하는 컨테이너를 변경하도록 설계된 메서드.
              reduce 메서드는 두 값을 하나로 도출하는 불변형 연산하는 메서드.

        5) 컬렉션 프레임워크 유연성 : 같은 연산도 다양한 방식으로 수행할 수 있다.
            <code>
                // 1. collect - reducing 사용 / return : int
                int totalCalories = menu.stream().collect(Collectors.reducing(0, Dish::getCalories, Integer::sum));

                // 2. map 사용 / return : Optional<Integer>
                // 예외 처리가 가능하다 - orElse, orElseGet ...
                Optional<Integer> totalCalories2 = menu.stream().map(Dish::getCalories).reduce(Integer::sum);

                // 3. intStream 사용 / return : int
                // autoBoxing을 내부적으로 사용하지 않아도 되기에 선능까지 좋다.
                int totalCalories3 = menu.stream().mapToInt(Dish::getCalories).sum();
            </code>

    1-2 그룹화
        - 명령형으로 그룹화를 구현하려면 까다롭고, 할일이 많으며, 에러도 많이 발생한다.
        - 다음처럼 팩토리 메서드 Collectors.groupingBy 를 이용하면 쉽게 메뉴를 그룹화할 수 있다.
        <code>
            Map<Dish.Type, List<Dish>> collect = menu.stream().collect(Collectors.groupingBy(Dish::getType));
            System.out.println(collect);
            // return : {OTHER=[french fries, rice, season fruit, pizza], FISH=[prawns, salmon], MEAT=[pork, beef, chicken]}
        </code>
        => Dish.Type과 일치하는 모든 요리를 추출한다.
           groupingBy 함수를 기준으로 스트림이 그룹화되므로 이를 분류함수라고 부른다.

        <code>
            Map<CaloricLevel, List<Dish>> collect = menu.stream().collect(Collectors.groupingBy(dish-> {
                if(dish.getCalories()<=400) return CaloricLevel.DIET;
                else if(dish.getCalories()<=700) return CaloricLevel.NORMAL;
                else return CaloricLevel.FAT;
            }));
            System.out.println(collect);
            // return : {FAT=[pork], NORMAL=[beef, french fries, pizza, salmon], DIET=[chicken, rice, season fruit, prawns]}
        </code>
        => 400칼로리 이하는 'DIET', 400~700은 'NORMAL', 700 초과는 'FAT'로 분류한다.

        1) 그룹화된 요소 조작
            - 예제 : src/theory/java/modern/chap06/SingleGroupingExample.java 참조
            - 요소를 그룹화 한 다음에는 각 결과 그룹의 요소를 조작하는 연산이 필요하다.
            - 예를 들어 500칼로리가 넘는 요리만 필터링한다 가정할 때 아래 코드와 같다.
            <code>
                Map<Dish.Type, List<Dish>> collect = menu.stream().filter(dish -> dish.getCalories() > 500).collect(Collectors.groupingBy(Dish::getType));
                System.out.println(collect);
                // return : {MEAT=[pork, beef], OTHER=[french fries, pizza]}
            </code>
            => 이처럼 해결할 수 있지만 필터 Predicate를 만족하는 FISH 요리가 없기에 해당 키 자체가 사라진다.

            - 위와 같은 상황을 아래와 같이 방지한다.
            (1) filtering
                - Collectors 클래스는 일반적인 분류 함수에 Collector 형식의 두 번째 인수를 갖도록 groupingBy 팩토리 메서드를 오버로드 할 수 있다.
                <code>
                    Map<Dish.Type, List<Dish>> collect = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.filtering(dish -> dish.getCalories() > 500, Collectors.toList())));
                    System.out.println(collect);
                    // return : {FISH=[], OTHER=[french fries, pizza], MEAT=[pork, beef]}
                </code>
                => filtering 메서드는 Collectors 클래스의 또 다른 정적 팩토리 메서드로 Predicate를 인수로 받는다.
                   이 Predicate로 각 그룹의 요소와 필터링 된 요소를 재그룹화 한다.
                   목록이 비어있는 FISH도 항목으로 추가된다.

            (2) mapping
                <code>
                    Map<Dish.Type, List<String>> collect = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.mapping(Dish::getName, Collectors.toList())));
                    Map<Dish.Type, List<Dish>> collect1 = menu.stream().collect(Collectors.groupingBy(Dish::getType));
                    System.out.println(collect);
                    System.out.println(collect1);
                    // return : {FISH=[prawns, salmon], OTHER=[french fries, rice, season fruit, pizza], MEAT=[pork, beef, chicken]}
                </code>
                => collect와 collect1의 결과값은 동일하다.

            (3) flatMapping
            <code>
                Map<Type, Set<String>> collect = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.flatMapping(dish -> dishTags.get(dish.getName()).stream(), Collectors.toSet())));
                System.out.println(collect);
                // return : {FISH=[roasted, tasty, fresh, delicious], OTHER=[salty, greasy, natural, light, tasty, fresh, fried], MEAT=[salty, greasy, roasted, fried, crisp]}
            </code>
            => 두 수준의 리스트를 한 수준으로 평면화하려면 flatMap을 수행해야 한다.
               이전처럼 각 그룹에 수행한 flatMapping 연산 결과를 수집해서 리스트가 아니라 집합으로 그룹화해 중복 태그를 제거한다.

        2) 다수준 그룹화
            - 에제 : src/theory/java/modern/chap06/MultipleGroupingExample.java 참조
            - Collectors.groupingBy는 일반적인 분류 함수와 컬렉터를 인수로 받는다.
            - 즉, 바깥쪽 groupingBy 메서드에 스트림의 항목을 분류할 때
              두 번째 기준을 정의하는 내부 groupingBy를 전달해서 두 수준으로 스트림의 항목을 그룹화할 수 있다.
            <code>
                Map<Type, Map<CaloricLevel, List<Dish>>> collect = menu.stream().collect(
                        Collectors.groupingBy(Dish::getType, Collectors.groupingBy(
                                dish -> {
                                    if (dish.getCalories() <= 400) return CaloricLevel.Diet;
                                    else if (dish.getCalories() <= 700) return CaloricLevel.NORMAL;
                                    else return CaloricLevel.FAT;
                                }
                        ))
                );
                System.out.println(collect);
                // return : {OTHER={Diet=[rice, season fruit], NORMAL=[french fries, pizza]},
                //           FISH={NORMAL=[salmon], Diet=[prawns]},
                //           MEAT={Diet=[chicken], NORMAL=[beef], FAT=[pork]}}
            </code>
            => 외부 맵은 첫 번째 수준의 분류 함수에서 분류한 키 값 'fish, meat, other'을 갖는다.
               외부 맵의 값은 두 번째 수준의 함수의 기준 'normal, diet, fat'을 키 값으로 갖는다.
               최종적으로 두 수준의 맵은 첫 번째 키와 두 번째 키의 기준에 부합하는 요소 리스트를 값으로 갖는다.


        3) 서브그룹으로 데이터 수집
            - 예제 : src/theory/java/modern/chap06/SubGroupExample.java 참조
            - 첫 번째 groupingBy로 넘겨주는 컬렉터의 형식은 제한이 없다.
            - 메뉴에서 요리의 수를 종류별로 계산할 수 있다.
            <code>
                Map<Type, Long> map = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.counting()));
                System.out.println(map);
                // return : {OTHER=4, FISH=2, MEAT=3}
            </code>

            - 요리의 종류를 분류하는 컬렉터로 메뉴에서 가장 높은 칼로리를 가진 요리를 찾을 수 있다.
            <code>
                // comparingInt를 사용했지만 comparing으로 대체 가능하다.
                Map<Type, Optional<Dish>> most = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.maxBy(Comparator.comparingInt(Dish::getCalories))));
                System.out.println(most);
                // return : {OTHER=Optional[pizza], FISH=Optional[salmon], MEAT=Optional[pork]}
            </code>

            (1) 컬렉터 결과를 다른 형식에 적용하기
                - 마지막 그룹화 연산에서 맵의 모든 값을 Optional로 감쌀 필요가 없으므로 Optional을 삭제할 수 있다.
                - 아래 코드처럼 말이다.
                <code>
                    Map<Dish.Type, Dish> deleteOptional = menu.stream().collect(Collectors.groupingBy(Dish::getType,    // 분류 함수
                         Collectors.collectingAndThen(
                                Collectors.maxBy(
                                        Comparator.comparing(Dish::getCalories) // 감싸인 컬렉터
                                ), Optional::get)));    // 변환 함수

                    System.out.println(deleteOptional);
                    // return : {FISH=salmon, MEAT=pork, OTHER=pizza}
                </code>
                => collectingAndThen은 적용할 컬렉터와 변환 함수를 인수로 받아 다른 컬렉터를 반환한다.

            (2) groupingBy와 함께 사용하는 다른 컬렉터 예제
                - 일반적으로 스트림에서 같은 그룹으로 분류된 모든 요소에 리듀싱 작업을 수행할 때는 팩토리 메서드 groupingBy에 두 번째 인수로 전달한 컬렉터를 사용한다.
                - 모든요리의 칼로리 합계를 구하려고 만든 컬렉터를 재사용할 수 있다.
                - 아래 코드를 보자.
                <code>
                    Map<Dish.Type, Integer> totalCaloriesCount = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.summingInt(Dish::getCalories)));
                    System.out.println(totalCaloriesCount);
                    // return : {FISH=850, MEAT=1900, OTHER=1550}
                </code>

                - mapping 메서드는 스트림의 인수를 변환하는 함수와 변환 함수의 결과 객체를 누적하는 컬렉터를 인수로 받는다.
                - mapping은 입력 요소를 누적하기 전에 매핑 함수를 적용해서 다양한 형식의 객체를 주어진 형식의 컬렉터에 맞게 변환하는 역할을 한다.
                - 각 요리 형식에 존재하는 모든 CaloricLevel값을 추출한다.
                - 아래 코드를 보자.
                <code>
                    Map<Dish.Type, Set<CaloricLevel>> caloricLevelsByType = menu.stream().collect(
                            Collectors.groupingBy(Dish::getType, Collectors.mapping(dish -> {
                                if (dish.getCalories() <= 400) return CaloricLevel.Diet;
                                else if (dish.getCalories() <= 700) return CaloricLevel.NORMAL;
                                else return CaloricLevel.FAT;
                            }, Collectors.toSet()))
                    );
                    System.out.println(caloricLevelsByType);
                    // return : {FISH=[NORMAL, Diet], MEAT=[NORMAL, Diet, FAT], OTHER=[NORMAL, Diet]}
                </code>
                => mappring 메서드에 전달한 변환 함수는 Dish를 CaloricLevel로 매핑한다.
                   그리고 CaloricLevel 결과 스트림은 toSet 컬렉터로 전달되면서 리스트가 아닌 집합으로 스트림의 요소가 누적된다.

                - 위에서 본 코드는 Set의 형식이 정해져 있지 않았다.
                  이때 toCollection을 이용하면 원하는 방식으로 결과를 제어할 수 있다.
                - 아래와 같이 메서드 참조 HashSet::new를 toCollection에 전달할 수 있다.
                <code>
                    Map<Dish.Type, Set<CaloricLevel>> caloricLevelsByType2 = menu.stream().collect(
                            Collectors.groupingBy(Dish::getType, Collectors.mapping(dish -> {
                                if (dish.getCalories() <= 400) return CaloricLevel.Diet;
                                else if (dish.getCalories() <= 700) return CaloricLevel.NORMAL;
                                else return CaloricLevel.FAT;
                            }, Collectors.toCollection(HashSet::new)))
                    );
                    System.out.println(caloricLevelsByType2);
                    // return : {FISH=[NORMAL, Diet], MEAT=[NORMAL, Diet, FAT], OTHER=[NORMAL, Diet]}
                </code>
