* 모던 자바 인 액션 chap06 - Collectors 정적 팩토리 메서드 p.223

3. Collectors 클래스의 정적 팩토리 메서드

    1) toList
        - 반환형식 : List<T>
        - 사용예제 : 스트림의 모든 항목을 리스트로 수집
        <code>
            List<Dish> dishes = menu.stream().collect(Collectors.toList());
        </code>

    2) toSet
        - 반환형식 : Set<T>
        - 사용예제 : 스트림의 모든 항목을 중복이 없는 집합으로 수집
        <code>
            Set<Dish> dishes = menu.stream().collect(Collectors.toSet());
        </code>

    3) toCollection
        - 반환형식 : Collection<T>
        - 사용예제 : 스트림의 모든 항목을 발행자가 제공하는 컬렉션으로 수집
        <code>
            Collection<Dish> dishes = menu.stream().collect(Collectors.toCollection(), ArrayList::new);
        </code>

    4) counting
        - 반환형식 : Long
        - 사용예제 : 스트림의 항목 수 계산
        <code>
            long howManyDishes = menu.stream().collect(Collectors.counting());
        </code>

    5) summingInt
        - 반환형식 : Integer
        - 사용예제 : 스트림의 항목에서 정수 프로퍼티 값을 더함
        <code>
            int totalCalories = menu.stream().collect(Collectors.summingInt(Dish::getCalories));
        </code>

    6) summarizingInt
        - 반환형식 : IntSummaryStatistics
        - 사용예제 : 스트림 내 항목의 최댓값, 최솟값, 합계, 평균 등의 정수 정보 통계 수집
        <code>
            IntSummaryStatistics menuStatistics = menu.stream().collect(Collectors.summarizingInt(Dish::getCalories));
        </code>

    7) averagingInt
        - 반환형식 : Double
        - 사용예제 : 스트림 항목의 정수 프로퍼티의 평균값 계산
        <code>
            Double avgCalories = menu.stream().collect(Collectors.averagingInt(Dish::getCalories));
        </code>

    8) joining
        - 반환형식 : String
        - 사용예제 : 스트림의 각 항목에 toString 메서드를 호출한 결과 문자열 연결
        <code>
            String shortMenu = menu.stream().map(Dish::getName).collect(Collectors.joining(","));
        </code>

    9) maxBy
        - 반환형식 : Optional<T>
        - 사용예제 : 주어진 비교자를 이용해서 스트림의 최댓값 요소를 Optional로 감싼 값을 반환.
                    스트림에 요소가 없을 때는 Optional.empty() 반환
        <code>
            Optional<Dish> fattest = menu.stream().collect(Collectors.maxBy(Comparator.comparingInt(Dish::getCalories)));
        </code>

    10) minBy
        - 반환형식 : Optional<T>
        - 사용예제 : 주어진 비교자를 이용해서 스트림의 최솟값 요소를 Optional로 감싼 값을 반환.
                    스트림에 요소가 없을 때는 Optional.empty() 반환
        <code>
            Optional<Dish> lightest = menu.stream().collect(Collectors.minBy(Comparator.comparingInt(Dish::getCalories)));
        </code>

    11) reducing
        - 반환형식 : The type produced by the reduction operation
        - 사용예제 : 누적자를 초깃값으로 설정한 다음에 BinaryOperator로 스트림의 각 요소를 반복적으로 누적자와 합쳐 스트림을 하나의 값으로 리듀싱
        <code>
            Integer totalCalories = menu.stream().collect(Collectors.reducing(0, Dish::getCalories, Integer::sum));
        </code>

    12) collectingAndThen
        - 반환형식 : The type returned by the transforming function
        - 사용예제 : 다른 컬렉터를 감싸고 그 결과에 변환 함수 적용
        <code>
            Integer howManyDishes = menu.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));
        </code>

    13) groupingBy
        - 반환형식 : Map<K, List<T>>
        - 사용예제 : 하나의 프로퍼티값을 기준으로 스트림의 항목을 그룹화하며 기준 프로퍼티값을 결과 맵의 키로 사용
        <code>
            Map<Type, List<Dish>> dishesByType = menu.stream().collect(Collectors.groupingBy(Dish::getType));
        </code>

    14) partitioningBy
        - 반환형식 : Map<Boolean, List<T>>
        - 사용예제 : 프리디케이트를 스트림의 각 항목에 적용한 결과로 항목 분할
        <code>
            Map<Boolean, List<Dish>> vegetarianDishes = menu.stream().collect(Collectors.partitioningBy(Dish::isVegetarian));
        </code>
