1. 복합체 패턴이란?
    - 복합체(Composite) 는 하나 이상의 유사한 객체를 구성으로 설계된 객체로 모두 유사한 기능을 나타낸다.
      이를 통해 객체 그룹으 조작하는 것처럼, 단일 객체를 조작할 수 있다.
    - 복합체 패턴은 클라이언트가 복합 객체나 단일 객체를 동일하게 취급하는 것을 목적으로 한다.
    - 여기서 복합체의 의도는 트리 구조로 작성하여, 전체-부분 관계를 표현하는 것이다.
    - 즉, 복합체 패턴은 객체들을 트리 구조들로 구성한 후, 이러한 구조들과 개별 객체들처럼 작업할 수 있도록 하는 구조 패턴이다.


2. 장점
    - 다형성과 재귀를 유리하게 사용해 복잡한 트리 구조들과 더 편리하게 작업할 수 있다.
    - OCP 원칙인 객체 트리와 작동하는 기존 코드를 훼손하지 않고 앱에 새로운 요소 유형들을 도입할 수 있다.

3. 단점
    - 기능이 너무 다른 클래스들에는 공통 인터페이스를 제공하기 어려울 수 있다.
    - 컴포넌트 인터페이스를 과도하게 일반화 해야하기 때문에 이해하기 어려울 수 있다.

4. 다른 패턴과의 관계
    - 복잡한 복합체 패턴 트리를 생성할 때 빌더를 사용할 수 있다.
      왜냐하면 빌더의 생성단계들을 재귀적으로 작동하도록 프로그래밍할 수 있기 때문이다.
    - 복합체 패턴 및 데코레이터는 다이어그램이 유사하다.
      왜냐하면 둘 다 재귀적인 합성에 의존하여 하나 또는 불특정 다수의 객체들을 정리하기 때문이다.
    ※ 데코레이터 vs 복합체
        - 데코레이터는 자식 컴포넌트가 하나만 있다.
        - 데코레이터는 래핑된 객체에 추가 책임들을 추가하는 반면 복합체 패턴은 자신의 자식들의 결과를 '요약'하기만 한다.

3. 예제
    - 예제 소스 : - src/theory/java/source/gof/structural/composite/Main.java 참조
                - src/theory/java/source/gof/structural/composite/Main2.java 참조


* 출처 : - https://refactoring.guru/ko/design-patterns/composite
        - https://mygumi.tistory.com/343
        - https://readystory.tistory.com/131


