1. 브리지 패턴이란?
    - 브리지 패턴은 기능을 처리하는 클래스와 구현을 담당하는 추상 클래스로 구별한다.
    - 구현뿐 아니라 추상화도 독립적 변경이 필요할 때 브리지 패턴을 사용한다.
    - 2개의 객체는 추상화를 구현해서 분리하여 매우 독립적으로 사용할 수 있어야 한다.
    - 브리지 패턴은 기존 시스템에 부수적인 새로운 기능들을 지속적으로 추가할 때 사용하면 유용하다.
    - 브리지 패턴은 새로운 인터페이스를 정의하여 기존 프로그램의 변경 없이 기능을 확장할 수 있다.
2. 구성요소
    1) Implementor
        - abstract 기능을 구현하기 위한 인터페이스 정의
    2) ConcreateImplementor
        - 실제 기능 구현
    3) Abstract
        - 기능 계층의 최상위 클래스
        - 구현 부분에 해당하는 클래스를 인스턴스를 가지고 구현부 메서드를 호출한다.
    4) RefinedAbstract
        - 기능 계층에서 새로운 부분을 확장한 클래스

3. 브리지 패턴의 특징
    - 브리지 패턴은 복합 객체를 다시 재정의하여 추상 계층화된 구조이다.
    - 구성 클래스의 연결 부분을 추상 클래스로 변경하고 이를 통해 각각의 계층이 독립적으로 확장 및 변경이 가능해진다.
    - 상속 대신 구현을 통해 분리된 객체를 연결하며 구현을 통해 객체를 연결하면 객체 간 종속 관계를 제거할 수 있다.

5. 예제
    - 예제 소스 : - src/theory/java/source/gof/structural/bridge/Main.java 참조


* 출처 : - https://refactoring.guru/ko/design-patterns/bridge
        - https://hirlawldo.tistory.com/169


