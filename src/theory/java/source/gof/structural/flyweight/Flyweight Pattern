1. 플라이웨이트 패턴이란?
    - 각 객체에 모든 데이터를 유지하는 대신 여러 객체들 간에 상태의 공통 부분들을
      공유하여 사용할 수 있는 RAM에 더 많은 객체들을 포함할 수 있도록 하는 구조 디자인 패턴이다.
    - 인스턴스를 가능한 한 공유해서 사용함으로써 메모리를 절약하는 패턴이다.
    - '공유'를 통해서 대량의 객체들을 효과적으로 지원하는 방법이다.



2. 장점
    - 프로그램에 유사한 객체들이 많다고 가정하면 많은 RAM을 절약할 수 있다.

3. 단점
    - 복잡성이 증가한다.

4. 다른 패턴과의 관계
    - 싱글턴 vs 플라이웨이트
        1) 플라이웨이트 패턴은 예제에서 보다시피 나무가 색깔이 바뀔 때 객체를 생성한다.
          색상 별로 하나씩, 결과적으로 여러 개의 나무가 생기고 만들어진 객체의 색상은 바꿀 수 없다.
          따라서 하나씩 여러종류를 가질 수 있다.
        2) 싱글톤 패턴은 나무 클래스에 단 한개의 나무만 만들 수 있다.
          싱글톤 패턴을 사용한다면 만들어진 단 하나의 객체(나무)의 색깔을 바꿔야만 한다.
          하나의 클래스에 단 하나의 인스턴스를 생성하고, 대신 변수를 필요시 변경해가며 쓸 수 있다는 차이가 있다.
          따라서 싱글톤 패턴은 종류 상관없이 단 하나만 가질 수 있다.
    - RAM을 절약하기 위해 복합체 패턴 트리의 공유된 잎 노드들을 플라이웨이트들로 구현할 수 있다.
    - 플라이웨이트 패턴은 작은 객체들을 많이 만드는 방법을 보여주는 반면,
      퍼사드 패턴은 전체 하위 시스템을 나타내는 단일 객체를 만드는 방법을 보여준다.

5. 예제
    - 예제 소스 : - src/theory/java/source/gof/structural/flyweight/Main.java 참조

* 출처 : - https://refactoring.guru/ko/design-patterns/flyweight
        - https://velog.io/@hoit_98/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-Flyweight-%ED%8C%A8%ED%84%B4
        - https://readystory.tistory.com/137

