1. 옵저버 패턴이란?
    - 옵저버 패턴은 객체의 상태 변화를 관찰하는 관찰자들, 즉 옵저버들의 목록을 객체에 등록하여
      상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지하도록 하는 디자인 패턴이다.
    - 어떤 객체의 변경 사항이 발생하였을 때 이와 연관된 객체들에게 알려주는 디자인 패턴이다.


2. 장점
    - 실시간으로 한 객체의 변경사항을 다른 객체에 전파할 수 있다.
    - 느슨한 결합으로 시스템이 유연하고 객체간의 의존성을 제거할 수 있다.

3. 단점
    - 너무 많이 사용하게 되면, 상태 관리가 힘들 수 있다.
    - 데이터 배분에 문제가 생기면 자칫 큰 문제로 이어질 수 있다.

4. 다른 패턴과의 관계
    1) 커맨드 vs 중재자 vs 옵서버 vs 책임 연쇄
        - 책임 연쇄 패턴은 잠재적 수신자의 동적 체인을 따라 수신자 중 하나에 의해 요청이 처리될 때까지 요청을 순차적으로 전달한다.
        - 커맨드 패턴은 발신자와 수신자 간의 단방향 연결을 설립한다.
        - 중재자 패턴은 발신자와 수신자 간의 직접 연결을 제거하여 그들이 중재자 객체를 통해 간접적으로 통신하도록 강제한다.
        - 옵서버 패턴은 수신자들이 요청들의 수신을 동적으로 구독 및 구독 취소할 수 있도록 한다.

    2) 중재자 vs 옵저버
        - 중재자의 주목적은 시스템 컴포넌트들의 집합 간의 상호 의존성을 제거하는 것이다.
          그러면 이러한 컴포넌트들은 대신 단일 중재자 객체에 의존하게 된다.
        - 옵저버 패턴의 목적은 객체들 사이에 단방향 연결을 설정하는 것으로, 여기서 일부 객체는 다른 객체의 종속자 역할을 한다.
        


5. 예제
    - 예제 소스 : -  참조

* 출처 : - https://refactoring.guru/ko/design-patterns/observer
        - https://coding-factory.tistory.com/710
        - https://pjh3749.tistory.com/266

