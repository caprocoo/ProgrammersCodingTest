1. Singleton Pattern
    - 오직 한 개의 인스턴스만을 갖도록 하며, 이에 대한 전역적인 접근을 허용한다.
    - 일반적으로 특정 클래스의 인스턴스가 반드시 하나여야 하나 여러 곳에서 사용하는 경우에 싱글턴 패턴을 사용한다.
    - 생성된 인스턴스를 여러 곳에서 공유하여 사용해도 무리가 없다면 메모리 낭비를 방지하기 위해 싱글턴 패턴을 적용한다.

2. 예제
    - 예제 : src/theory/java/source/gof/singleton/Wifi.java 참조
    - 카페의 와이파이를 사용하여 네트워크에 연결한다고 가정하자.
    - 카페에서는 와이파이가 필요한 사용자마다 와이파이를 새로 만들어주지 않고 기존에 있던 네트워크를 공유해서 사용한다.
    - 위의 예제는 고객으로부터 와이파이 정보 요청이 오면
        - 있을 경우 있는 와이파이 정보를 준다.
        - 없으면 생성해서 준다.

    - 싱글턴 패턴을 사용하면 단 하나의 인스턴스만 생성되며 고정된 메모리 영역을 받기 때문에 단 하나의 객체만 생성되어 메모리가 낭비를 방지할 수 있다.

3. 문제점
    1) 상속할 수 없다.
        - 싱글턴 패턴은 객체가 어디서든지 원하는 대로 생성되는 걸 방지하기 위해 생성자를 private으로 선언한다.
        - private으로 선언하면 상속을 할 수 없고 이는 상속과 다형성을 해치는 개념이다.

    2) 강제로 전역 상태
        - 애초에 공유의 목적으로 생성된 클ㄹ스이기에 객체를 요청하는 메소드를 public으로 강제할 수밖에 없다.
        - 특정 메서드가 정보의 은닉 범위, 공개 수준 등등에 전혀 상관없이 public으로 선언하였기에 정보 은닉을 해친다.

    3) 객체가 하나인 것을 보장할 수 없다.
        - 싱글턴 패턴의 핵심은 싱글턴인 것을 보장할 수 있어야 한다는 점이지만 java의 고전적 싱글턴 패턴은 객체가 하나인 것을 보장할 수 없다.
        - 멀티쓰레드를 예로 듦녀 해당 인스턴스는 공유되어 사용되기 때문에 여러 개의 쓰레드가 동시에 접근하여 메서드를 호출할 수 있다.
        - 문제는 2개 이상의 쓰레드가 동시에 객체 생성을 하게 되면 2개 이상의 객체가 생성되며 이는 싱글턴이 아닌게 되는 것이다.



* 출처 : - https://tech-people.github.io/2020/01/08/java-design-pattern-creational/