1. 빌더 패턴이란?
    - 빌더 패턴은 복잡한 객체를 생성하는 방법을 정의하는 클래스와 표현하는 방법을 정의하는 클래스를 별도로 분리하여,
      서로 다른 표현이라도 이를 생성할 수 있는 동일한 절차를 제공하는 패턴이다.
    - 빌더 패턴은 생성해야 되는 객체가 Optional한 멤버 변수(혹은 파라미터)나 지속성 없는 상태 값들에 대해 처리해야 하는 문제들을 해결한다.
    - 예를들어 팩토리 패턴이나 추상 팩토리 패턴에서는 다음과 같은 이슈가 있다.
        1) 클라이언트 프로그램으로부터 팩토리 클래스로 많은 파라미터를 넘겨줄 때 타입, 순서 등에 대한 관리가 어려워져 에러가 발생할 확률이 높아진다.
        2) 경우에 따라 필요없는 파라미터들에 대해서 팩토리 클래스에 모두 null 값을 넘겨줘야 한다.
        3) 생성해야 하는 sub class가 무거워지고 복잡해짐에 따라 팩토리 클래스 또한 복잡해진다.

    - 빌더 패턴은 위와 같은 문제를 해결하기 위해 별도의 Builder 클래스를 만들어 필수 값에 대해서는 생성자를 통해,
      선택적인 값들에 대해서는 메서드를 통해 step-by-step으로 값을 입력받은 후에 build() 메서드를 통해 최종적으로 하나의 인스턴스를 리턴한다.

2. 빌더 패턴을 구현하는 방법
    1) 빌더 클래스를 Static Nested Class로 생성한다.
       이 때, 관례적으로 생성하고자 하는 클래스 이름 뒤에 Builder를 붙인다.
    2) 빌더 클래스의 생성자는 public으로 하며 필수 값들에 대해 생성자의 파라미터로 받는다.
    3) Optional한 값들에 대해서는 각각의 속성마다 메서드로 제공하며,
       이 때, 중요한 것은 메서드의 리턴 값이 빌더 객체 자신이어야 한다.
    4) 빌더 클래스 내에 build() 메서드를 정의하여 클라이언트 프로그램에게 최종 생성된 결과물을 제공한다.
       build()를 통해서만 객체 생성을 제공하기 때문에 생성 대상이 되는 클래스의 생성자는 private으로 정의해야 한다.

3. 예제
    - 예제 소스 : src/theory/java/source/gof/creational/builder/TestBuilderPattern.java
            src/theory/java/source/gof/creational/builder/Computer.java



* 출처 : - https://readystory.tistory.com/121