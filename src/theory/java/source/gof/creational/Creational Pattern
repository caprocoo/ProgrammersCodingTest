1. 생성패턴이란?
    - 생성 패턴은 인스턴스를 만드는 절차를 추상화하는 패턴이다.
    - 생성 패턴에 속하는 패턴들은 객첼를 생성, 합성하는 방법이나 객체의 표현 방법을 시스템과 분리해준다.
    - 상속보다 복합 방법을 사용하는 방향으로 진화되어 가면서 생성패턴의 개념이 더 중요해지고 있다.

2. 생성 패턴 특징
    1) 생성 패턴은 시스템이 어떤 구체 클래스를 사용하는지에 대한 정보를 캡슐화한다.
    2) 생성 패턴은 이들 클래스의 인스턴스들이 어떻게 만들고 어떻게 서로 맞붙는지에 대한 부분을 완전히 가린다.
    => 쉽게 말하면 생성 패턴을 이용하면 무엇이 생성되고, 누가 이것을 생성하며, 이것이 어떻게 생성되는지, 언제 생성할 것인지 결정하는데 유연성을 확보할 수 있게 된다.

3. 생성패턴 종류
    1) 팩토리 메서드 (Factory Method)
        - Virtual-Constructor 패턴이라고도 한다.
        - 객체를 생성하기 위한 인터페이스를 정의하여 어떤 클래스가 인스턴스화 될 것인지는 서브클래스가 결정한다.

    2) 추상 팩토리 (Abstract Factory)
        - 구체적인 클래스에 의존하지 않고, 서로 연관·의존하는 객체들의 그룹으로 생성하여 추상적으로 표현한다.
        - 연관된 서브 클래스를 묶어 한 번에 교체 가능하다.

    3) 빌더 (Builder)
        - 건축가가 블록을 조립하는 모습이다.
        - 분리된 인스턴스(객체)를 건축하듯이 조합하여 객체를 생성한다.
        - 동일한 객체 생성에서도 다른 결과가 나올 수 있다.

    4) 프로토타입 (Prototype)
        - 원본 객체를 복제하는 방법으로 객체를 생성하는 패턴이다.
        - 비용이 큰 경우 주로 이용한다.

    5) 싱글톤 (Singleton)
        - 객체를 어디서든 참조할 수 있지만, 여러 프로세스가 동시에 참조하는 것은 불가능하다.
        - 인스턴스가 하나뿐이기 때문에 불필요한 메모리 낭비를 최소화 할 수 있다.

* 출처 : - https://readystory.tistory.com/119
        - https://velog.io/@ha0kim/Design-Pattern-%EC%83%9D%EC%84%B1-%ED%8C%A8%ED%84%B4Creational-Patterns