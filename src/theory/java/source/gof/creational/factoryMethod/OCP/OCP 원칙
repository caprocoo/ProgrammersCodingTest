1. OCP 원칙이란? => 추상화를 의미
    - 기존의 코드를 변경하지 않으면서, 기능을 추가할 수 있도록 설계가 되어야 한다는 원칙을 말한다.
    - 보통 OCP를 확장에 대해서는 개방적이고, 수정에 대해서는 폐쇄적이어야 한다는 의미로 정의한다.
    - 확장에 개방적이란 새로운 변경 사항이 발생했을 때 유연하게 코드를 추가함으로써 애플리케이션의 기능을 확장할 수 있음을 뜻한다.
    - 수정에 폐쇄적이란 새로운 변경 사항이 발생했을 때 객체를 직접적으로 수정하는 것을 제한한다는 뜻이다.
      객체를 직접적으로 수정해야 한다면 새로운 변경사항에 대해 유연하게 대응할 수 없는 애플리케이션이라고 말한다.
    - 기능 추가 요청이 들어오면 클래스를 확장을 통해 손쉽게 구현하면서 확장에 따른 클래스 수정은 최소화 하도록 프로그램을 작성해야 하는 설계 기법을 말한다고 보면 된다.
    - 즉, OCP는 다형성과 확장을 가능케 하는 객체지향의 장점을 극대화하는 설계 원칙이다.

2. OCP 원칙 위반 예제
    - 예제 : src/theory/java/source/gof/creational/factoryMethod/OCP/IncorrectMain.java 참조
    - 위에 보이는 소스는 동작 자체에는 문제가 없지만 문제는 기능 추가이다.
    - 만일 '고양이'나 '강아지' 외의 동물을 추가한다면 HeeloAnimal 클래스를 각 객체의 필드 변수에 맞게 if문을 수정해주어야 한다.
    - 이런식으로 코드를 구성한다면, 동물이 추가될때마다 계속 코드를 일일히 변경해줘야 하는 번거로운 작업이 생기게 된다.

3. OCP 원칙 예제
    - 예제 : src/theory/java/source/gof/creational/factoryMethod/OCP/Main.java 참조
    - OCP 설계 원칙에 따라 적절한 추상화 클래스를 구성하고 이를 상속하여 확장시키는 관계로 구성하면 OCP 프로그램을 만들 수 있다.
    - 아래와 같은 규칙에 따른다.
        1) 먼저 확장될 것과 변하지 않을 것을 엄격히 구분한다.
        2) 이 두 모듈이 만나는 지점에 추상화(추상클래스 or 인터페이스)를 정의한다.
        3) 구현체에 의존하기보다 정의한 추상화에 의존하도록 코드를 작성한다.

4. OCP 원칙 적용 주의점
    - 확장에는 열려있고 변경에는 닫히게 하기 위해서는 추상화를 잘 설계할 필요성이 있는데 추상화를 정의할 때 여러 경우의 수에 대한 고려와 예측이 필요하다.
    - 보통 우리는 추상화라는 개념에 대해 '구체적이지 않은' 정도의 의미로 느슨하게 알고 있지만,
      '그래디 부치(Grady Booch)'에 의하면 추상화란 다른 모든 종류의 객체로부터 식별될 수 있는 객체의 본질적인 특징으로 정의한다.
    - 즉 추상 메서드 설계에서 적당한 추상화 레벨을 선택함으로써 어떤 행위에 대한 본질적인 정의를 서브 클래스에 전파함으로써 관계를 성립되게 하는 것이다.



* 출처 : - https://inpa.tistory.com/entry/OOP-%F0%9F%92%A0-%EC%95%84%EC%A3%BC-%EC%89%BD%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EB%8A%94-OCP-%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84-%EC%9B%90%EC%B9%99