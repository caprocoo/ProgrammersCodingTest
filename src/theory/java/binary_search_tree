Binary Search Tree (이진 탐색 트리)

1. 이진 탐색 트리 성질
    - 모든 원소의 키는 유일한 키를 가진다.
    - 왼쪽 서브 트리 키들은 루트 키보다 작다.
    - 오른쪽 서브 트리 키들은 루트 키보다 크다.
    - 왼쪽과 오른쪽 서브 트리도 이진 탐색 트리이다.

    => 찾고자 하는 키 값이 이진트리의 루트 노드의 킷값과 비교해
       루트 노드보다 작으면 원하는 키값은 왼쪽 서브 트리에 있고,
       루트 노드보다 크면 원하는 키 값은 오른쪽 서브 트리에 있다.

2. 순환적인 탐색 연산
    : 이진 탐색 트리에서 특정한 키값을 가진 노드를 찾기 위해서는 먼저 주어진 탐색키 값과 루트 노드의 키값을 비교한다.
      비교한 결과에 따라 3가지로 나누어진다.

      1) 비교한 결과가 같으면 탐색이 성공적으로 끝난다.
      2) 비교한 결과가, 주어진 키 값이 루트 노드의 키값보다 작으면, 탐색은 이 루트 노드의 왼쪽 자식을 기준으로 다시 시작한다.
      3) 비교한 결과가, 주어진 키 값이 루트 노드의 키값보다 크면, 탐색은 이 루트 노드의 오른쪽 자식을 기준으로 다시 시작한다.

   <code>
    </code>

3. 이진 탐색 트리에서의 삽입 연산
   <code>
   // 노드 삽입
   public Node insertNode(Node node, int key) {
   	if(node == null) {
   		return new Node(key); // 노드가 빈 경우, 새로운 노드 삽입후 반환
   	}

   	// 그렇지 않으면 순환적으로 트리를 내려감
   	if(key < node.data) {
   		node.left = insertNode(node.left, key);
   	} else if(key > node.data) {
   		node.right = insertNode(node.right, key);
   	}

   	// 삽입 완료 후, 루트 노드 반환하며 끝
   	return node;
   }
    </code>

4. 이진 탐색 트리에서의 삭제 연산
    : 탐색 후에 3가지 경우를 고려해야 한다.
    1) 삭제하려는 노드가 단말 노드일 경우
        - 단말 노드 아래에는 더 이상의 노드가 없으므로 단말 노드만 지우면 된다.
        - 단말 노드의 부모 노드를 찾아서 부모 노드의 링크 필드를 null로 만들어 연결을 끊는다.
    2) 삭제하려는 노드가 하나의 서브 트리만(왼쪽 or 오른쪽) 가지고 있는 경우
        - 자기 노드는 삭제하고, 서브 트리는 자기 노드의 부모 노드에 붙여주면 된다.
    3) 삭제하려는 노드가 두 개의 서브 트리를 가지고 있는 경우
        - 삭제되는 노드와 가장 값이 비슷한 노드를 후계자로 선택해야 이진 탐색 트리가 그대로 유지된다.
        - 가장 값이 가까운 노드? => 왼쪽 서브 트리에서 가장 큰 값이나 오른쪽 서브트리에서 가장 작은 값
        - 삭제되는 노드의 오른쪽 서브 트리에서 가장 작은 값을 갖는 노드는 오른쪽 서브트리에서 왼쪽 자식 노드를 타고
          null을 만날 때까지 계속 타고 내려가면 찾을 수 있다.

* 출처 :
 - https://minhamina.tistory.com/97
