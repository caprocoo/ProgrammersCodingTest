1. 비동기 처리란?
    : js의 비동기 처리란 특정 코드의 연산이 끝날 때까지 코드의 실행을 멈추지 ㅇ낳고 다음 코드를 먼저 실행하는 js의 특성을 의미한다.

2. 첫 번째 예시 - ajax
    <code>
        function getData() {
        	var tableData;
        	$.get('https://domain.com/products/1', function(response) {
        		tableData = response;
        	});
        	return tableData;
        }

        console.log(getData()); // undefined
    </code>

    - undefined로 출력되는 이유는 get방식으로 데이터를 요청하고 받아올 때까지 기다려 주지 않고
      다음 코드인 return tableData; 를 실행했기 때문이다.
    => getData()의 결과 값은 초기 값을 설정하지 않은 tableData의 값 undefined를 출력한다.

    - 이렇게 특정 로직의 실행이 끝날 때까지 기다려주지 않고 나머지 코드를 먼저 실행하는 것이 비동기 처리이다.
    - 서버로 데이터를 요청했을 때 서버가 언제 그 요청에 대한 응답을 줄지도 모르는데 마냥 다른 코드를 실행 안하고 기다릴 수 없기 때문이다.

3. 두 번째 예시 - setTimeOut()
    <code>
        // #1
        console.log('Hello');
        // #2
        setTimeout(function() {
        	console.log('Bye');
        }, 3000);
        // #3
        console.log('Hello Again');
    </code>
    - 예상 결과
        : ‘Hello’ 출력
          3초 있다가 ‘Bye’ 출력
          ‘Hello Again’ 출력

    - 위의 실제 결과
        : ‘Hello’ 출력
          ‘Hello Again’ 출력
          3초 있다가 ‘Bye’ 출력
    => 3초가 이후에 출력

4. 콜백 함수로 비동기 처리 방식의 문제점 해결하기
   <code>
        function getData(callbackFunc) {
        	$.get('https://domain.com/products/1', function(response) {
        		callbackFunc(response); // 서버에서 받은 데이터 response를 callbackFunc() 함수에 넘겨줌
        	});
        }

        getData(function(tableData) {
        	console.log(tableData); // $.get()의 response 값이 tableData에 전달됨
        });
    </code>
    - 위의 코드처럼 콜백 함수를 사용하면 특정 로직이 끝났을 때 원하는 동작을 실행시킬 수 있다.
    - 콜백 함수의 동작 방식은 일종의 식당 자리 예약과 같은데 식당이 만석일 때, 대기자 명단에 이름을 쓴 후에 식당에 자리가 나면 전화가 오는 것과 같다.
      전화를 받는 시점이 여기서의 콜백 함수가 호출되는 시점과 같다.
    - 자리가 준비된 시점, 즉 데이터가 준비된 시점에서만 원하는 동작을 수행할 수 있다.

5. 콜백 지옥
    <code>
        $.get('url', function(response) {
        	parseValue(response, function(id) {
        		auth(id, function(result) {
        			display(result, function(text) {
        				console.log(text);
        			});
        		});
        	});
        });
    </code>
    - 웹 서비스를 개발하다 보면 서버에서 데이터를 받아와 화면에 표시하기까지 인코딩, 사용자 인증 등으 처리해야 하는 경우가 많다.
    - 만약 이 모든 과정을 비동기로 처리해야 한다면 위와 같이 콜백 안에 콜백을 계속 무든 형식으로 코딩을 하게 된다.
    - 이러한 코드 구조는 가독성도 떨어지고 로직 변경도 어렵다. 이를 콜백 지옥이라 한다.

6. 콜백 지옥 해결 방법
    - 일반적으로는 Promise와 Async를 사용하여 콜백 지옥을 해결한다.
    - 만약 코딩 패턴으로 해결하려면 아래와 같이 함수를 분리하면 된다.
    <code>
        function parseValueDone(id) {
        	auth(id, authDone);
        }
        function authDone(result) {
        	display(result, displayDone);
        }
        function displayDone(text) {
        	console.log(text);
        }
        $.get('url', function(response) {
        	parseValue(response, parseValueDone);
        });
    </code>
    1) ajax 통신으로 받은 데이터를 parseValue() 메서드로 파싱
    2) parseValueDone()에 파싱한 결과값인 id가 전달되고 auth() 메서드 실행
    3) auth() 메서드로 인증을 거치고 나면 콜백 함수인 authDone()이 실행
    4) 인증 결과 값인 result로 display() 호출
    5) 마지막으로 displayDone() 메서드가 수행되면서 text 콘솔에 출력


* 출처 : - https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/